
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model HandoverDocument
 * 
 */
export type HandoverDocument = $Result.DefaultSelection<Prisma.$HandoverDocumentPayload>
/**
 * Model HandoverVersion
 * 
 */
export type HandoverVersion = $Result.DefaultSelection<Prisma.$HandoverVersionPayload>
/**
 * Model HandoverShare
 * 
 */
export type HandoverShare = $Result.DefaultSelection<Prisma.$HandoverSharePayload>
/**
 * Model HandoverComment
 * 
 */
export type HandoverComment = $Result.DefaultSelection<Prisma.$HandoverCommentPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.handoverDocument`: Exposes CRUD operations for the **HandoverDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HandoverDocuments
    * const handoverDocuments = await prisma.handoverDocument.findMany()
    * ```
    */
  get handoverDocument(): Prisma.HandoverDocumentDelegate<ExtArgs>;

  /**
   * `prisma.handoverVersion`: Exposes CRUD operations for the **HandoverVersion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HandoverVersions
    * const handoverVersions = await prisma.handoverVersion.findMany()
    * ```
    */
  get handoverVersion(): Prisma.HandoverVersionDelegate<ExtArgs>;

  /**
   * `prisma.handoverShare`: Exposes CRUD operations for the **HandoverShare** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HandoverShares
    * const handoverShares = await prisma.handoverShare.findMany()
    * ```
    */
  get handoverShare(): Prisma.HandoverShareDelegate<ExtArgs>;

  /**
   * `prisma.handoverComment`: Exposes CRUD operations for the **HandoverComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HandoverComments
    * const handoverComments = await prisma.handoverComment.findMany()
    * ```
    */
  get handoverComment(): Prisma.HandoverCommentDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    HandoverDocument: 'HandoverDocument',
    HandoverVersion: 'HandoverVersion',
    HandoverShare: 'HandoverShare',
    HandoverComment: 'HandoverComment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "handoverDocument" | "handoverVersion" | "handoverShare" | "handoverComment"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      HandoverDocument: {
        payload: Prisma.$HandoverDocumentPayload<ExtArgs>
        fields: Prisma.HandoverDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HandoverDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HandoverDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverDocumentPayload>
          }
          findFirst: {
            args: Prisma.HandoverDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HandoverDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverDocumentPayload>
          }
          findMany: {
            args: Prisma.HandoverDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverDocumentPayload>[]
          }
          create: {
            args: Prisma.HandoverDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverDocumentPayload>
          }
          createMany: {
            args: Prisma.HandoverDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HandoverDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverDocumentPayload>[]
          }
          delete: {
            args: Prisma.HandoverDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverDocumentPayload>
          }
          update: {
            args: Prisma.HandoverDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverDocumentPayload>
          }
          deleteMany: {
            args: Prisma.HandoverDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HandoverDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HandoverDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverDocumentPayload>
          }
          aggregate: {
            args: Prisma.HandoverDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHandoverDocument>
          }
          groupBy: {
            args: Prisma.HandoverDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<HandoverDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.HandoverDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<HandoverDocumentCountAggregateOutputType> | number
          }
        }
      }
      HandoverVersion: {
        payload: Prisma.$HandoverVersionPayload<ExtArgs>
        fields: Prisma.HandoverVersionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HandoverVersionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverVersionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HandoverVersionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverVersionPayload>
          }
          findFirst: {
            args: Prisma.HandoverVersionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverVersionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HandoverVersionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverVersionPayload>
          }
          findMany: {
            args: Prisma.HandoverVersionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverVersionPayload>[]
          }
          create: {
            args: Prisma.HandoverVersionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverVersionPayload>
          }
          createMany: {
            args: Prisma.HandoverVersionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HandoverVersionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverVersionPayload>[]
          }
          delete: {
            args: Prisma.HandoverVersionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverVersionPayload>
          }
          update: {
            args: Prisma.HandoverVersionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverVersionPayload>
          }
          deleteMany: {
            args: Prisma.HandoverVersionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HandoverVersionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HandoverVersionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverVersionPayload>
          }
          aggregate: {
            args: Prisma.HandoverVersionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHandoverVersion>
          }
          groupBy: {
            args: Prisma.HandoverVersionGroupByArgs<ExtArgs>
            result: $Utils.Optional<HandoverVersionGroupByOutputType>[]
          }
          count: {
            args: Prisma.HandoverVersionCountArgs<ExtArgs>
            result: $Utils.Optional<HandoverVersionCountAggregateOutputType> | number
          }
        }
      }
      HandoverShare: {
        payload: Prisma.$HandoverSharePayload<ExtArgs>
        fields: Prisma.HandoverShareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HandoverShareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverSharePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HandoverShareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverSharePayload>
          }
          findFirst: {
            args: Prisma.HandoverShareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverSharePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HandoverShareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverSharePayload>
          }
          findMany: {
            args: Prisma.HandoverShareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverSharePayload>[]
          }
          create: {
            args: Prisma.HandoverShareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverSharePayload>
          }
          createMany: {
            args: Prisma.HandoverShareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HandoverShareCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverSharePayload>[]
          }
          delete: {
            args: Prisma.HandoverShareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverSharePayload>
          }
          update: {
            args: Prisma.HandoverShareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverSharePayload>
          }
          deleteMany: {
            args: Prisma.HandoverShareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HandoverShareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HandoverShareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverSharePayload>
          }
          aggregate: {
            args: Prisma.HandoverShareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHandoverShare>
          }
          groupBy: {
            args: Prisma.HandoverShareGroupByArgs<ExtArgs>
            result: $Utils.Optional<HandoverShareGroupByOutputType>[]
          }
          count: {
            args: Prisma.HandoverShareCountArgs<ExtArgs>
            result: $Utils.Optional<HandoverShareCountAggregateOutputType> | number
          }
        }
      }
      HandoverComment: {
        payload: Prisma.$HandoverCommentPayload<ExtArgs>
        fields: Prisma.HandoverCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HandoverCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HandoverCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverCommentPayload>
          }
          findFirst: {
            args: Prisma.HandoverCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HandoverCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverCommentPayload>
          }
          findMany: {
            args: Prisma.HandoverCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverCommentPayload>[]
          }
          create: {
            args: Prisma.HandoverCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverCommentPayload>
          }
          createMany: {
            args: Prisma.HandoverCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HandoverCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverCommentPayload>[]
          }
          delete: {
            args: Prisma.HandoverCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverCommentPayload>
          }
          update: {
            args: Prisma.HandoverCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverCommentPayload>
          }
          deleteMany: {
            args: Prisma.HandoverCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HandoverCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HandoverCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HandoverCommentPayload>
          }
          aggregate: {
            args: Prisma.HandoverCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHandoverComment>
          }
          groupBy: {
            args: Prisma.HandoverCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<HandoverCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.HandoverCommentCountArgs<ExtArgs>
            result: $Utils.Optional<HandoverCommentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    handovers: number
    comments: number
    versions: number
    shares: number
    sharesReceived: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    handovers?: boolean | UserCountOutputTypeCountHandoversArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    versions?: boolean | UserCountOutputTypeCountVersionsArgs
    shares?: boolean | UserCountOutputTypeCountSharesArgs
    sharesReceived?: boolean | UserCountOutputTypeCountSharesReceivedArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHandoversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverDocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverVersionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverShareWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSharesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverShareWhereInput
  }


  /**
   * Count Type HandoverDocumentCountOutputType
   */

  export type HandoverDocumentCountOutputType = {
    versions: number
    shares: number
    comments: number
  }

  export type HandoverDocumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    versions?: boolean | HandoverDocumentCountOutputTypeCountVersionsArgs
    shares?: boolean | HandoverDocumentCountOutputTypeCountSharesArgs
    comments?: boolean | HandoverDocumentCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * HandoverDocumentCountOutputType without action
   */
  export type HandoverDocumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocumentCountOutputType
     */
    select?: HandoverDocumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HandoverDocumentCountOutputType without action
   */
  export type HandoverDocumentCountOutputTypeCountVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverVersionWhereInput
  }

  /**
   * HandoverDocumentCountOutputType without action
   */
  export type HandoverDocumentCountOutputTypeCountSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverShareWhereInput
  }

  /**
   * HandoverDocumentCountOutputType without action
   */
  export type HandoverDocumentCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverCommentWhereInput
  }


  /**
   * Count Type HandoverCommentCountOutputType
   */

  export type HandoverCommentCountOutputType = {
    replies: number
  }

  export type HandoverCommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | HandoverCommentCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes
  /**
   * HandoverCommentCountOutputType without action
   */
  export type HandoverCommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverCommentCountOutputType
     */
    select?: HandoverCommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HandoverCommentCountOutputType without action
   */
  export type HandoverCommentCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverCommentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    fullName: string | null
    department: string | null
    position: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    fullName: string | null
    department: string | null
    position: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    fullName: number
    department: number
    position: number
    createdAt: number
    updatedAt: number
    isActive: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    fullName?: true
    department?: true
    position?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    fullName?: true
    department?: true
    position?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    fullName?: true
    department?: true
    position?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    email: string
    fullName: string
    department: string | null
    position: string | null
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    fullName?: boolean
    department?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    handovers?: boolean | User$handoversArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    versions?: boolean | User$versionsArgs<ExtArgs>
    shares?: boolean | User$sharesArgs<ExtArgs>
    sharesReceived?: boolean | User$sharesReceivedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    fullName?: boolean
    department?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    fullName?: boolean
    department?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    handovers?: boolean | User$handoversArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    versions?: boolean | User$versionsArgs<ExtArgs>
    shares?: boolean | User$sharesArgs<ExtArgs>
    sharesReceived?: boolean | User$sharesReceivedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      handovers: Prisma.$HandoverDocumentPayload<ExtArgs>[]
      comments: Prisma.$HandoverCommentPayload<ExtArgs>[]
      versions: Prisma.$HandoverVersionPayload<ExtArgs>[]
      shares: Prisma.$HandoverSharePayload<ExtArgs>[]
      sharesReceived: Prisma.$HandoverSharePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string
      fullName: string
      department: string | null
      position: string | null
      createdAt: Date
      updatedAt: Date
      isActive: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    handovers<T extends User$handoversArgs<ExtArgs> = {}>(args?: Subset<T, User$handoversArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "findMany"> | Null>
    versions<T extends User$versionsArgs<ExtArgs> = {}>(args?: Subset<T, User$versionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverVersionPayload<ExtArgs>, T, "findMany"> | Null>
    shares<T extends User$sharesArgs<ExtArgs> = {}>(args?: Subset<T, User$sharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "findMany"> | Null>
    sharesReceived<T extends User$sharesReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$sharesReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly department: FieldRef<"User", 'String'>
    readonly position: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly isActive: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.handovers
   */
  export type User$handoversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocument
     */
    select?: HandoverDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverDocumentInclude<ExtArgs> | null
    where?: HandoverDocumentWhereInput
    orderBy?: HandoverDocumentOrderByWithRelationInput | HandoverDocumentOrderByWithRelationInput[]
    cursor?: HandoverDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HandoverDocumentScalarFieldEnum | HandoverDocumentScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    where?: HandoverCommentWhereInput
    orderBy?: HandoverCommentOrderByWithRelationInput | HandoverCommentOrderByWithRelationInput[]
    cursor?: HandoverCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HandoverCommentScalarFieldEnum | HandoverCommentScalarFieldEnum[]
  }

  /**
   * User.versions
   */
  export type User$versionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionInclude<ExtArgs> | null
    where?: HandoverVersionWhereInput
    orderBy?: HandoverVersionOrderByWithRelationInput | HandoverVersionOrderByWithRelationInput[]
    cursor?: HandoverVersionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HandoverVersionScalarFieldEnum | HandoverVersionScalarFieldEnum[]
  }

  /**
   * User.shares
   */
  export type User$sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
    where?: HandoverShareWhereInput
    orderBy?: HandoverShareOrderByWithRelationInput | HandoverShareOrderByWithRelationInput[]
    cursor?: HandoverShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HandoverShareScalarFieldEnum | HandoverShareScalarFieldEnum[]
  }

  /**
   * User.sharesReceived
   */
  export type User$sharesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
    where?: HandoverShareWhereInput
    orderBy?: HandoverShareOrderByWithRelationInput | HandoverShareOrderByWithRelationInput[]
    cursor?: HandoverShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HandoverShareScalarFieldEnum | HandoverShareScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model HandoverDocument
   */

  export type AggregateHandoverDocument = {
    _count: HandoverDocumentCountAggregateOutputType | null
    _avg: HandoverDocumentAvgAggregateOutputType | null
    _sum: HandoverDocumentSumAggregateOutputType | null
    _min: HandoverDocumentMinAggregateOutputType | null
    _max: HandoverDocumentMaxAggregateOutputType | null
  }

  export type HandoverDocumentAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type HandoverDocumentSumAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type HandoverDocumentMinAggregateOutputType = {
    id: number | null
    title: string | null
    authorId: number | null
    status: string | null
    priority: string | null
    category: string | null
    mongoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    completedAt: Date | null
    archivedAt: Date | null
  }

  export type HandoverDocumentMaxAggregateOutputType = {
    id: number | null
    title: string | null
    authorId: number | null
    status: string | null
    priority: string | null
    category: string | null
    mongoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    completedAt: Date | null
    archivedAt: Date | null
  }

  export type HandoverDocumentCountAggregateOutputType = {
    id: number
    title: number
    authorId: number
    status: number
    priority: number
    category: number
    tags: number
    mongoId: number
    createdAt: number
    updatedAt: number
    completedAt: number
    archivedAt: number
    _all: number
  }


  export type HandoverDocumentAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type HandoverDocumentSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type HandoverDocumentMinAggregateInputType = {
    id?: true
    title?: true
    authorId?: true
    status?: true
    priority?: true
    category?: true
    mongoId?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
    archivedAt?: true
  }

  export type HandoverDocumentMaxAggregateInputType = {
    id?: true
    title?: true
    authorId?: true
    status?: true
    priority?: true
    category?: true
    mongoId?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
    archivedAt?: true
  }

  export type HandoverDocumentCountAggregateInputType = {
    id?: true
    title?: true
    authorId?: true
    status?: true
    priority?: true
    category?: true
    tags?: true
    mongoId?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
    archivedAt?: true
    _all?: true
  }

  export type HandoverDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HandoverDocument to aggregate.
     */
    where?: HandoverDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverDocuments to fetch.
     */
    orderBy?: HandoverDocumentOrderByWithRelationInput | HandoverDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HandoverDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HandoverDocuments
    **/
    _count?: true | HandoverDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HandoverDocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HandoverDocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HandoverDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HandoverDocumentMaxAggregateInputType
  }

  export type GetHandoverDocumentAggregateType<T extends HandoverDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateHandoverDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHandoverDocument[P]>
      : GetScalarType<T[P], AggregateHandoverDocument[P]>
  }




  export type HandoverDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverDocumentWhereInput
    orderBy?: HandoverDocumentOrderByWithAggregationInput | HandoverDocumentOrderByWithAggregationInput[]
    by: HandoverDocumentScalarFieldEnum[] | HandoverDocumentScalarFieldEnum
    having?: HandoverDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HandoverDocumentCountAggregateInputType | true
    _avg?: HandoverDocumentAvgAggregateInputType
    _sum?: HandoverDocumentSumAggregateInputType
    _min?: HandoverDocumentMinAggregateInputType
    _max?: HandoverDocumentMaxAggregateInputType
  }

  export type HandoverDocumentGroupByOutputType = {
    id: number
    title: string
    authorId: number
    status: string
    priority: string
    category: string | null
    tags: string[]
    mongoId: string
    createdAt: Date
    updatedAt: Date
    completedAt: Date | null
    archivedAt: Date | null
    _count: HandoverDocumentCountAggregateOutputType | null
    _avg: HandoverDocumentAvgAggregateOutputType | null
    _sum: HandoverDocumentSumAggregateOutputType | null
    _min: HandoverDocumentMinAggregateOutputType | null
    _max: HandoverDocumentMaxAggregateOutputType | null
  }

  type GetHandoverDocumentGroupByPayload<T extends HandoverDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HandoverDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HandoverDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HandoverDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], HandoverDocumentGroupByOutputType[P]>
        }
      >
    >


  export type HandoverDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    authorId?: boolean
    status?: boolean
    priority?: boolean
    category?: boolean
    tags?: boolean
    mongoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    archivedAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    versions?: boolean | HandoverDocument$versionsArgs<ExtArgs>
    shares?: boolean | HandoverDocument$sharesArgs<ExtArgs>
    comments?: boolean | HandoverDocument$commentsArgs<ExtArgs>
    _count?: boolean | HandoverDocumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["handoverDocument"]>

  export type HandoverDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    authorId?: boolean
    status?: boolean
    priority?: boolean
    category?: boolean
    tags?: boolean
    mongoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    archivedAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["handoverDocument"]>

  export type HandoverDocumentSelectScalar = {
    id?: boolean
    title?: boolean
    authorId?: boolean
    status?: boolean
    priority?: boolean
    category?: boolean
    tags?: boolean
    mongoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    archivedAt?: boolean
  }

  export type HandoverDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    versions?: boolean | HandoverDocument$versionsArgs<ExtArgs>
    shares?: boolean | HandoverDocument$sharesArgs<ExtArgs>
    comments?: boolean | HandoverDocument$commentsArgs<ExtArgs>
    _count?: boolean | HandoverDocumentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HandoverDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $HandoverDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HandoverDocument"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      versions: Prisma.$HandoverVersionPayload<ExtArgs>[]
      shares: Prisma.$HandoverSharePayload<ExtArgs>[]
      comments: Prisma.$HandoverCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      authorId: number
      status: string
      priority: string
      category: string | null
      tags: string[]
      mongoId: string
      createdAt: Date
      updatedAt: Date
      completedAt: Date | null
      archivedAt: Date | null
    }, ExtArgs["result"]["handoverDocument"]>
    composites: {}
  }

  type HandoverDocumentGetPayload<S extends boolean | null | undefined | HandoverDocumentDefaultArgs> = $Result.GetResult<Prisma.$HandoverDocumentPayload, S>

  type HandoverDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HandoverDocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HandoverDocumentCountAggregateInputType | true
    }

  export interface HandoverDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HandoverDocument'], meta: { name: 'HandoverDocument' } }
    /**
     * Find zero or one HandoverDocument that matches the filter.
     * @param {HandoverDocumentFindUniqueArgs} args - Arguments to find a HandoverDocument
     * @example
     * // Get one HandoverDocument
     * const handoverDocument = await prisma.handoverDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HandoverDocumentFindUniqueArgs>(args: SelectSubset<T, HandoverDocumentFindUniqueArgs<ExtArgs>>): Prisma__HandoverDocumentClient<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HandoverDocument that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HandoverDocumentFindUniqueOrThrowArgs} args - Arguments to find a HandoverDocument
     * @example
     * // Get one HandoverDocument
     * const handoverDocument = await prisma.handoverDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HandoverDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, HandoverDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HandoverDocumentClient<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HandoverDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverDocumentFindFirstArgs} args - Arguments to find a HandoverDocument
     * @example
     * // Get one HandoverDocument
     * const handoverDocument = await prisma.handoverDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HandoverDocumentFindFirstArgs>(args?: SelectSubset<T, HandoverDocumentFindFirstArgs<ExtArgs>>): Prisma__HandoverDocumentClient<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HandoverDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverDocumentFindFirstOrThrowArgs} args - Arguments to find a HandoverDocument
     * @example
     * // Get one HandoverDocument
     * const handoverDocument = await prisma.handoverDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HandoverDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, HandoverDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__HandoverDocumentClient<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HandoverDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HandoverDocuments
     * const handoverDocuments = await prisma.handoverDocument.findMany()
     * 
     * // Get first 10 HandoverDocuments
     * const handoverDocuments = await prisma.handoverDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const handoverDocumentWithIdOnly = await prisma.handoverDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HandoverDocumentFindManyArgs>(args?: SelectSubset<T, HandoverDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HandoverDocument.
     * @param {HandoverDocumentCreateArgs} args - Arguments to create a HandoverDocument.
     * @example
     * // Create one HandoverDocument
     * const HandoverDocument = await prisma.handoverDocument.create({
     *   data: {
     *     // ... data to create a HandoverDocument
     *   }
     * })
     * 
     */
    create<T extends HandoverDocumentCreateArgs>(args: SelectSubset<T, HandoverDocumentCreateArgs<ExtArgs>>): Prisma__HandoverDocumentClient<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HandoverDocuments.
     * @param {HandoverDocumentCreateManyArgs} args - Arguments to create many HandoverDocuments.
     * @example
     * // Create many HandoverDocuments
     * const handoverDocument = await prisma.handoverDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HandoverDocumentCreateManyArgs>(args?: SelectSubset<T, HandoverDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HandoverDocuments and returns the data saved in the database.
     * @param {HandoverDocumentCreateManyAndReturnArgs} args - Arguments to create many HandoverDocuments.
     * @example
     * // Create many HandoverDocuments
     * const handoverDocument = await prisma.handoverDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HandoverDocuments and only return the `id`
     * const handoverDocumentWithIdOnly = await prisma.handoverDocument.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HandoverDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, HandoverDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HandoverDocument.
     * @param {HandoverDocumentDeleteArgs} args - Arguments to delete one HandoverDocument.
     * @example
     * // Delete one HandoverDocument
     * const HandoverDocument = await prisma.handoverDocument.delete({
     *   where: {
     *     // ... filter to delete one HandoverDocument
     *   }
     * })
     * 
     */
    delete<T extends HandoverDocumentDeleteArgs>(args: SelectSubset<T, HandoverDocumentDeleteArgs<ExtArgs>>): Prisma__HandoverDocumentClient<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HandoverDocument.
     * @param {HandoverDocumentUpdateArgs} args - Arguments to update one HandoverDocument.
     * @example
     * // Update one HandoverDocument
     * const handoverDocument = await prisma.handoverDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HandoverDocumentUpdateArgs>(args: SelectSubset<T, HandoverDocumentUpdateArgs<ExtArgs>>): Prisma__HandoverDocumentClient<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HandoverDocuments.
     * @param {HandoverDocumentDeleteManyArgs} args - Arguments to filter HandoverDocuments to delete.
     * @example
     * // Delete a few HandoverDocuments
     * const { count } = await prisma.handoverDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HandoverDocumentDeleteManyArgs>(args?: SelectSubset<T, HandoverDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HandoverDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HandoverDocuments
     * const handoverDocument = await prisma.handoverDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HandoverDocumentUpdateManyArgs>(args: SelectSubset<T, HandoverDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HandoverDocument.
     * @param {HandoverDocumentUpsertArgs} args - Arguments to update or create a HandoverDocument.
     * @example
     * // Update or create a HandoverDocument
     * const handoverDocument = await prisma.handoverDocument.upsert({
     *   create: {
     *     // ... data to create a HandoverDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HandoverDocument we want to update
     *   }
     * })
     */
    upsert<T extends HandoverDocumentUpsertArgs>(args: SelectSubset<T, HandoverDocumentUpsertArgs<ExtArgs>>): Prisma__HandoverDocumentClient<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HandoverDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverDocumentCountArgs} args - Arguments to filter HandoverDocuments to count.
     * @example
     * // Count the number of HandoverDocuments
     * const count = await prisma.handoverDocument.count({
     *   where: {
     *     // ... the filter for the HandoverDocuments we want to count
     *   }
     * })
    **/
    count<T extends HandoverDocumentCountArgs>(
      args?: Subset<T, HandoverDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HandoverDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HandoverDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HandoverDocumentAggregateArgs>(args: Subset<T, HandoverDocumentAggregateArgs>): Prisma.PrismaPromise<GetHandoverDocumentAggregateType<T>>

    /**
     * Group by HandoverDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HandoverDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HandoverDocumentGroupByArgs['orderBy'] }
        : { orderBy?: HandoverDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HandoverDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHandoverDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HandoverDocument model
   */
  readonly fields: HandoverDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HandoverDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HandoverDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    versions<T extends HandoverDocument$versionsArgs<ExtArgs> = {}>(args?: Subset<T, HandoverDocument$versionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverVersionPayload<ExtArgs>, T, "findMany"> | Null>
    shares<T extends HandoverDocument$sharesArgs<ExtArgs> = {}>(args?: Subset<T, HandoverDocument$sharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends HandoverDocument$commentsArgs<ExtArgs> = {}>(args?: Subset<T, HandoverDocument$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HandoverDocument model
   */ 
  interface HandoverDocumentFieldRefs {
    readonly id: FieldRef<"HandoverDocument", 'Int'>
    readonly title: FieldRef<"HandoverDocument", 'String'>
    readonly authorId: FieldRef<"HandoverDocument", 'Int'>
    readonly status: FieldRef<"HandoverDocument", 'String'>
    readonly priority: FieldRef<"HandoverDocument", 'String'>
    readonly category: FieldRef<"HandoverDocument", 'String'>
    readonly tags: FieldRef<"HandoverDocument", 'String[]'>
    readonly mongoId: FieldRef<"HandoverDocument", 'String'>
    readonly createdAt: FieldRef<"HandoverDocument", 'DateTime'>
    readonly updatedAt: FieldRef<"HandoverDocument", 'DateTime'>
    readonly completedAt: FieldRef<"HandoverDocument", 'DateTime'>
    readonly archivedAt: FieldRef<"HandoverDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HandoverDocument findUnique
   */
  export type HandoverDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocument
     */
    select?: HandoverDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverDocumentInclude<ExtArgs> | null
    /**
     * Filter, which HandoverDocument to fetch.
     */
    where: HandoverDocumentWhereUniqueInput
  }

  /**
   * HandoverDocument findUniqueOrThrow
   */
  export type HandoverDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocument
     */
    select?: HandoverDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverDocumentInclude<ExtArgs> | null
    /**
     * Filter, which HandoverDocument to fetch.
     */
    where: HandoverDocumentWhereUniqueInput
  }

  /**
   * HandoverDocument findFirst
   */
  export type HandoverDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocument
     */
    select?: HandoverDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverDocumentInclude<ExtArgs> | null
    /**
     * Filter, which HandoverDocument to fetch.
     */
    where?: HandoverDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverDocuments to fetch.
     */
    orderBy?: HandoverDocumentOrderByWithRelationInput | HandoverDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HandoverDocuments.
     */
    cursor?: HandoverDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HandoverDocuments.
     */
    distinct?: HandoverDocumentScalarFieldEnum | HandoverDocumentScalarFieldEnum[]
  }

  /**
   * HandoverDocument findFirstOrThrow
   */
  export type HandoverDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocument
     */
    select?: HandoverDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverDocumentInclude<ExtArgs> | null
    /**
     * Filter, which HandoverDocument to fetch.
     */
    where?: HandoverDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverDocuments to fetch.
     */
    orderBy?: HandoverDocumentOrderByWithRelationInput | HandoverDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HandoverDocuments.
     */
    cursor?: HandoverDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HandoverDocuments.
     */
    distinct?: HandoverDocumentScalarFieldEnum | HandoverDocumentScalarFieldEnum[]
  }

  /**
   * HandoverDocument findMany
   */
  export type HandoverDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocument
     */
    select?: HandoverDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverDocumentInclude<ExtArgs> | null
    /**
     * Filter, which HandoverDocuments to fetch.
     */
    where?: HandoverDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverDocuments to fetch.
     */
    orderBy?: HandoverDocumentOrderByWithRelationInput | HandoverDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HandoverDocuments.
     */
    cursor?: HandoverDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverDocuments.
     */
    skip?: number
    distinct?: HandoverDocumentScalarFieldEnum | HandoverDocumentScalarFieldEnum[]
  }

  /**
   * HandoverDocument create
   */
  export type HandoverDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocument
     */
    select?: HandoverDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a HandoverDocument.
     */
    data: XOR<HandoverDocumentCreateInput, HandoverDocumentUncheckedCreateInput>
  }

  /**
   * HandoverDocument createMany
   */
  export type HandoverDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HandoverDocuments.
     */
    data: HandoverDocumentCreateManyInput | HandoverDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HandoverDocument createManyAndReturn
   */
  export type HandoverDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocument
     */
    select?: HandoverDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HandoverDocuments.
     */
    data: HandoverDocumentCreateManyInput | HandoverDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HandoverDocument update
   */
  export type HandoverDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocument
     */
    select?: HandoverDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a HandoverDocument.
     */
    data: XOR<HandoverDocumentUpdateInput, HandoverDocumentUncheckedUpdateInput>
    /**
     * Choose, which HandoverDocument to update.
     */
    where: HandoverDocumentWhereUniqueInput
  }

  /**
   * HandoverDocument updateMany
   */
  export type HandoverDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HandoverDocuments.
     */
    data: XOR<HandoverDocumentUpdateManyMutationInput, HandoverDocumentUncheckedUpdateManyInput>
    /**
     * Filter which HandoverDocuments to update
     */
    where?: HandoverDocumentWhereInput
  }

  /**
   * HandoverDocument upsert
   */
  export type HandoverDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocument
     */
    select?: HandoverDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the HandoverDocument to update in case it exists.
     */
    where: HandoverDocumentWhereUniqueInput
    /**
     * In case the HandoverDocument found by the `where` argument doesn't exist, create a new HandoverDocument with this data.
     */
    create: XOR<HandoverDocumentCreateInput, HandoverDocumentUncheckedCreateInput>
    /**
     * In case the HandoverDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HandoverDocumentUpdateInput, HandoverDocumentUncheckedUpdateInput>
  }

  /**
   * HandoverDocument delete
   */
  export type HandoverDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocument
     */
    select?: HandoverDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverDocumentInclude<ExtArgs> | null
    /**
     * Filter which HandoverDocument to delete.
     */
    where: HandoverDocumentWhereUniqueInput
  }

  /**
   * HandoverDocument deleteMany
   */
  export type HandoverDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HandoverDocuments to delete
     */
    where?: HandoverDocumentWhereInput
  }

  /**
   * HandoverDocument.versions
   */
  export type HandoverDocument$versionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionInclude<ExtArgs> | null
    where?: HandoverVersionWhereInput
    orderBy?: HandoverVersionOrderByWithRelationInput | HandoverVersionOrderByWithRelationInput[]
    cursor?: HandoverVersionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HandoverVersionScalarFieldEnum | HandoverVersionScalarFieldEnum[]
  }

  /**
   * HandoverDocument.shares
   */
  export type HandoverDocument$sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
    where?: HandoverShareWhereInput
    orderBy?: HandoverShareOrderByWithRelationInput | HandoverShareOrderByWithRelationInput[]
    cursor?: HandoverShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HandoverShareScalarFieldEnum | HandoverShareScalarFieldEnum[]
  }

  /**
   * HandoverDocument.comments
   */
  export type HandoverDocument$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    where?: HandoverCommentWhereInput
    orderBy?: HandoverCommentOrderByWithRelationInput | HandoverCommentOrderByWithRelationInput[]
    cursor?: HandoverCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HandoverCommentScalarFieldEnum | HandoverCommentScalarFieldEnum[]
  }

  /**
   * HandoverDocument without action
   */
  export type HandoverDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverDocument
     */
    select?: HandoverDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverDocumentInclude<ExtArgs> | null
  }


  /**
   * Model HandoverVersion
   */

  export type AggregateHandoverVersion = {
    _count: HandoverVersionCountAggregateOutputType | null
    _avg: HandoverVersionAvgAggregateOutputType | null
    _sum: HandoverVersionSumAggregateOutputType | null
    _min: HandoverVersionMinAggregateOutputType | null
    _max: HandoverVersionMaxAggregateOutputType | null
  }

  export type HandoverVersionAvgAggregateOutputType = {
    id: number | null
    documentId: number | null
    versionNumber: number | null
    createdBy: number | null
  }

  export type HandoverVersionSumAggregateOutputType = {
    id: number | null
    documentId: number | null
    versionNumber: number | null
    createdBy: number | null
  }

  export type HandoverVersionMinAggregateOutputType = {
    id: number | null
    documentId: number | null
    versionNumber: number | null
    mongoId: string | null
    createdAt: Date | null
    createdBy: number | null
    changeSummary: string | null
  }

  export type HandoverVersionMaxAggregateOutputType = {
    id: number | null
    documentId: number | null
    versionNumber: number | null
    mongoId: string | null
    createdAt: Date | null
    createdBy: number | null
    changeSummary: string | null
  }

  export type HandoverVersionCountAggregateOutputType = {
    id: number
    documentId: number
    versionNumber: number
    mongoId: number
    createdAt: number
    createdBy: number
    changeSummary: number
    _all: number
  }


  export type HandoverVersionAvgAggregateInputType = {
    id?: true
    documentId?: true
    versionNumber?: true
    createdBy?: true
  }

  export type HandoverVersionSumAggregateInputType = {
    id?: true
    documentId?: true
    versionNumber?: true
    createdBy?: true
  }

  export type HandoverVersionMinAggregateInputType = {
    id?: true
    documentId?: true
    versionNumber?: true
    mongoId?: true
    createdAt?: true
    createdBy?: true
    changeSummary?: true
  }

  export type HandoverVersionMaxAggregateInputType = {
    id?: true
    documentId?: true
    versionNumber?: true
    mongoId?: true
    createdAt?: true
    createdBy?: true
    changeSummary?: true
  }

  export type HandoverVersionCountAggregateInputType = {
    id?: true
    documentId?: true
    versionNumber?: true
    mongoId?: true
    createdAt?: true
    createdBy?: true
    changeSummary?: true
    _all?: true
  }

  export type HandoverVersionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HandoverVersion to aggregate.
     */
    where?: HandoverVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverVersions to fetch.
     */
    orderBy?: HandoverVersionOrderByWithRelationInput | HandoverVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HandoverVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HandoverVersions
    **/
    _count?: true | HandoverVersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HandoverVersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HandoverVersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HandoverVersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HandoverVersionMaxAggregateInputType
  }

  export type GetHandoverVersionAggregateType<T extends HandoverVersionAggregateArgs> = {
        [P in keyof T & keyof AggregateHandoverVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHandoverVersion[P]>
      : GetScalarType<T[P], AggregateHandoverVersion[P]>
  }




  export type HandoverVersionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverVersionWhereInput
    orderBy?: HandoverVersionOrderByWithAggregationInput | HandoverVersionOrderByWithAggregationInput[]
    by: HandoverVersionScalarFieldEnum[] | HandoverVersionScalarFieldEnum
    having?: HandoverVersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HandoverVersionCountAggregateInputType | true
    _avg?: HandoverVersionAvgAggregateInputType
    _sum?: HandoverVersionSumAggregateInputType
    _min?: HandoverVersionMinAggregateInputType
    _max?: HandoverVersionMaxAggregateInputType
  }

  export type HandoverVersionGroupByOutputType = {
    id: number
    documentId: number
    versionNumber: number
    mongoId: string
    createdAt: Date
    createdBy: number
    changeSummary: string | null
    _count: HandoverVersionCountAggregateOutputType | null
    _avg: HandoverVersionAvgAggregateOutputType | null
    _sum: HandoverVersionSumAggregateOutputType | null
    _min: HandoverVersionMinAggregateOutputType | null
    _max: HandoverVersionMaxAggregateOutputType | null
  }

  type GetHandoverVersionGroupByPayload<T extends HandoverVersionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HandoverVersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HandoverVersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HandoverVersionGroupByOutputType[P]>
            : GetScalarType<T[P], HandoverVersionGroupByOutputType[P]>
        }
      >
    >


  export type HandoverVersionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    versionNumber?: boolean
    mongoId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    changeSummary?: boolean
    document?: boolean | HandoverDocumentDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["handoverVersion"]>

  export type HandoverVersionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    versionNumber?: boolean
    mongoId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    changeSummary?: boolean
    document?: boolean | HandoverDocumentDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["handoverVersion"]>

  export type HandoverVersionSelectScalar = {
    id?: boolean
    documentId?: boolean
    versionNumber?: boolean
    mongoId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    changeSummary?: boolean
  }

  export type HandoverVersionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | HandoverDocumentDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HandoverVersionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | HandoverDocumentDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $HandoverVersionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HandoverVersion"
    objects: {
      document: Prisma.$HandoverDocumentPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      documentId: number
      versionNumber: number
      mongoId: string
      createdAt: Date
      createdBy: number
      changeSummary: string | null
    }, ExtArgs["result"]["handoverVersion"]>
    composites: {}
  }

  type HandoverVersionGetPayload<S extends boolean | null | undefined | HandoverVersionDefaultArgs> = $Result.GetResult<Prisma.$HandoverVersionPayload, S>

  type HandoverVersionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HandoverVersionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HandoverVersionCountAggregateInputType | true
    }

  export interface HandoverVersionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HandoverVersion'], meta: { name: 'HandoverVersion' } }
    /**
     * Find zero or one HandoverVersion that matches the filter.
     * @param {HandoverVersionFindUniqueArgs} args - Arguments to find a HandoverVersion
     * @example
     * // Get one HandoverVersion
     * const handoverVersion = await prisma.handoverVersion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HandoverVersionFindUniqueArgs>(args: SelectSubset<T, HandoverVersionFindUniqueArgs<ExtArgs>>): Prisma__HandoverVersionClient<$Result.GetResult<Prisma.$HandoverVersionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HandoverVersion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HandoverVersionFindUniqueOrThrowArgs} args - Arguments to find a HandoverVersion
     * @example
     * // Get one HandoverVersion
     * const handoverVersion = await prisma.handoverVersion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HandoverVersionFindUniqueOrThrowArgs>(args: SelectSubset<T, HandoverVersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HandoverVersionClient<$Result.GetResult<Prisma.$HandoverVersionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HandoverVersion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverVersionFindFirstArgs} args - Arguments to find a HandoverVersion
     * @example
     * // Get one HandoverVersion
     * const handoverVersion = await prisma.handoverVersion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HandoverVersionFindFirstArgs>(args?: SelectSubset<T, HandoverVersionFindFirstArgs<ExtArgs>>): Prisma__HandoverVersionClient<$Result.GetResult<Prisma.$HandoverVersionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HandoverVersion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverVersionFindFirstOrThrowArgs} args - Arguments to find a HandoverVersion
     * @example
     * // Get one HandoverVersion
     * const handoverVersion = await prisma.handoverVersion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HandoverVersionFindFirstOrThrowArgs>(args?: SelectSubset<T, HandoverVersionFindFirstOrThrowArgs<ExtArgs>>): Prisma__HandoverVersionClient<$Result.GetResult<Prisma.$HandoverVersionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HandoverVersions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverVersionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HandoverVersions
     * const handoverVersions = await prisma.handoverVersion.findMany()
     * 
     * // Get first 10 HandoverVersions
     * const handoverVersions = await prisma.handoverVersion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const handoverVersionWithIdOnly = await prisma.handoverVersion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HandoverVersionFindManyArgs>(args?: SelectSubset<T, HandoverVersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverVersionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HandoverVersion.
     * @param {HandoverVersionCreateArgs} args - Arguments to create a HandoverVersion.
     * @example
     * // Create one HandoverVersion
     * const HandoverVersion = await prisma.handoverVersion.create({
     *   data: {
     *     // ... data to create a HandoverVersion
     *   }
     * })
     * 
     */
    create<T extends HandoverVersionCreateArgs>(args: SelectSubset<T, HandoverVersionCreateArgs<ExtArgs>>): Prisma__HandoverVersionClient<$Result.GetResult<Prisma.$HandoverVersionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HandoverVersions.
     * @param {HandoverVersionCreateManyArgs} args - Arguments to create many HandoverVersions.
     * @example
     * // Create many HandoverVersions
     * const handoverVersion = await prisma.handoverVersion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HandoverVersionCreateManyArgs>(args?: SelectSubset<T, HandoverVersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HandoverVersions and returns the data saved in the database.
     * @param {HandoverVersionCreateManyAndReturnArgs} args - Arguments to create many HandoverVersions.
     * @example
     * // Create many HandoverVersions
     * const handoverVersion = await prisma.handoverVersion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HandoverVersions and only return the `id`
     * const handoverVersionWithIdOnly = await prisma.handoverVersion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HandoverVersionCreateManyAndReturnArgs>(args?: SelectSubset<T, HandoverVersionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverVersionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HandoverVersion.
     * @param {HandoverVersionDeleteArgs} args - Arguments to delete one HandoverVersion.
     * @example
     * // Delete one HandoverVersion
     * const HandoverVersion = await prisma.handoverVersion.delete({
     *   where: {
     *     // ... filter to delete one HandoverVersion
     *   }
     * })
     * 
     */
    delete<T extends HandoverVersionDeleteArgs>(args: SelectSubset<T, HandoverVersionDeleteArgs<ExtArgs>>): Prisma__HandoverVersionClient<$Result.GetResult<Prisma.$HandoverVersionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HandoverVersion.
     * @param {HandoverVersionUpdateArgs} args - Arguments to update one HandoverVersion.
     * @example
     * // Update one HandoverVersion
     * const handoverVersion = await prisma.handoverVersion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HandoverVersionUpdateArgs>(args: SelectSubset<T, HandoverVersionUpdateArgs<ExtArgs>>): Prisma__HandoverVersionClient<$Result.GetResult<Prisma.$HandoverVersionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HandoverVersions.
     * @param {HandoverVersionDeleteManyArgs} args - Arguments to filter HandoverVersions to delete.
     * @example
     * // Delete a few HandoverVersions
     * const { count } = await prisma.handoverVersion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HandoverVersionDeleteManyArgs>(args?: SelectSubset<T, HandoverVersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HandoverVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverVersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HandoverVersions
     * const handoverVersion = await prisma.handoverVersion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HandoverVersionUpdateManyArgs>(args: SelectSubset<T, HandoverVersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HandoverVersion.
     * @param {HandoverVersionUpsertArgs} args - Arguments to update or create a HandoverVersion.
     * @example
     * // Update or create a HandoverVersion
     * const handoverVersion = await prisma.handoverVersion.upsert({
     *   create: {
     *     // ... data to create a HandoverVersion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HandoverVersion we want to update
     *   }
     * })
     */
    upsert<T extends HandoverVersionUpsertArgs>(args: SelectSubset<T, HandoverVersionUpsertArgs<ExtArgs>>): Prisma__HandoverVersionClient<$Result.GetResult<Prisma.$HandoverVersionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HandoverVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverVersionCountArgs} args - Arguments to filter HandoverVersions to count.
     * @example
     * // Count the number of HandoverVersions
     * const count = await prisma.handoverVersion.count({
     *   where: {
     *     // ... the filter for the HandoverVersions we want to count
     *   }
     * })
    **/
    count<T extends HandoverVersionCountArgs>(
      args?: Subset<T, HandoverVersionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HandoverVersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HandoverVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HandoverVersionAggregateArgs>(args: Subset<T, HandoverVersionAggregateArgs>): Prisma.PrismaPromise<GetHandoverVersionAggregateType<T>>

    /**
     * Group by HandoverVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverVersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HandoverVersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HandoverVersionGroupByArgs['orderBy'] }
        : { orderBy?: HandoverVersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HandoverVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHandoverVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HandoverVersion model
   */
  readonly fields: HandoverVersionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HandoverVersion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HandoverVersionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends HandoverDocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HandoverDocumentDefaultArgs<ExtArgs>>): Prisma__HandoverDocumentClient<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HandoverVersion model
   */ 
  interface HandoverVersionFieldRefs {
    readonly id: FieldRef<"HandoverVersion", 'Int'>
    readonly documentId: FieldRef<"HandoverVersion", 'Int'>
    readonly versionNumber: FieldRef<"HandoverVersion", 'Int'>
    readonly mongoId: FieldRef<"HandoverVersion", 'String'>
    readonly createdAt: FieldRef<"HandoverVersion", 'DateTime'>
    readonly createdBy: FieldRef<"HandoverVersion", 'Int'>
    readonly changeSummary: FieldRef<"HandoverVersion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HandoverVersion findUnique
   */
  export type HandoverVersionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionInclude<ExtArgs> | null
    /**
     * Filter, which HandoverVersion to fetch.
     */
    where: HandoverVersionWhereUniqueInput
  }

  /**
   * HandoverVersion findUniqueOrThrow
   */
  export type HandoverVersionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionInclude<ExtArgs> | null
    /**
     * Filter, which HandoverVersion to fetch.
     */
    where: HandoverVersionWhereUniqueInput
  }

  /**
   * HandoverVersion findFirst
   */
  export type HandoverVersionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionInclude<ExtArgs> | null
    /**
     * Filter, which HandoverVersion to fetch.
     */
    where?: HandoverVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverVersions to fetch.
     */
    orderBy?: HandoverVersionOrderByWithRelationInput | HandoverVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HandoverVersions.
     */
    cursor?: HandoverVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HandoverVersions.
     */
    distinct?: HandoverVersionScalarFieldEnum | HandoverVersionScalarFieldEnum[]
  }

  /**
   * HandoverVersion findFirstOrThrow
   */
  export type HandoverVersionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionInclude<ExtArgs> | null
    /**
     * Filter, which HandoverVersion to fetch.
     */
    where?: HandoverVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverVersions to fetch.
     */
    orderBy?: HandoverVersionOrderByWithRelationInput | HandoverVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HandoverVersions.
     */
    cursor?: HandoverVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HandoverVersions.
     */
    distinct?: HandoverVersionScalarFieldEnum | HandoverVersionScalarFieldEnum[]
  }

  /**
   * HandoverVersion findMany
   */
  export type HandoverVersionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionInclude<ExtArgs> | null
    /**
     * Filter, which HandoverVersions to fetch.
     */
    where?: HandoverVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverVersions to fetch.
     */
    orderBy?: HandoverVersionOrderByWithRelationInput | HandoverVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HandoverVersions.
     */
    cursor?: HandoverVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverVersions.
     */
    skip?: number
    distinct?: HandoverVersionScalarFieldEnum | HandoverVersionScalarFieldEnum[]
  }

  /**
   * HandoverVersion create
   */
  export type HandoverVersionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionInclude<ExtArgs> | null
    /**
     * The data needed to create a HandoverVersion.
     */
    data: XOR<HandoverVersionCreateInput, HandoverVersionUncheckedCreateInput>
  }

  /**
   * HandoverVersion createMany
   */
  export type HandoverVersionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HandoverVersions.
     */
    data: HandoverVersionCreateManyInput | HandoverVersionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HandoverVersion createManyAndReturn
   */
  export type HandoverVersionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HandoverVersions.
     */
    data: HandoverVersionCreateManyInput | HandoverVersionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HandoverVersion update
   */
  export type HandoverVersionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionInclude<ExtArgs> | null
    /**
     * The data needed to update a HandoverVersion.
     */
    data: XOR<HandoverVersionUpdateInput, HandoverVersionUncheckedUpdateInput>
    /**
     * Choose, which HandoverVersion to update.
     */
    where: HandoverVersionWhereUniqueInput
  }

  /**
   * HandoverVersion updateMany
   */
  export type HandoverVersionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HandoverVersions.
     */
    data: XOR<HandoverVersionUpdateManyMutationInput, HandoverVersionUncheckedUpdateManyInput>
    /**
     * Filter which HandoverVersions to update
     */
    where?: HandoverVersionWhereInput
  }

  /**
   * HandoverVersion upsert
   */
  export type HandoverVersionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionInclude<ExtArgs> | null
    /**
     * The filter to search for the HandoverVersion to update in case it exists.
     */
    where: HandoverVersionWhereUniqueInput
    /**
     * In case the HandoverVersion found by the `where` argument doesn't exist, create a new HandoverVersion with this data.
     */
    create: XOR<HandoverVersionCreateInput, HandoverVersionUncheckedCreateInput>
    /**
     * In case the HandoverVersion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HandoverVersionUpdateInput, HandoverVersionUncheckedUpdateInput>
  }

  /**
   * HandoverVersion delete
   */
  export type HandoverVersionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionInclude<ExtArgs> | null
    /**
     * Filter which HandoverVersion to delete.
     */
    where: HandoverVersionWhereUniqueInput
  }

  /**
   * HandoverVersion deleteMany
   */
  export type HandoverVersionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HandoverVersions to delete
     */
    where?: HandoverVersionWhereInput
  }

  /**
   * HandoverVersion without action
   */
  export type HandoverVersionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverVersion
     */
    select?: HandoverVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverVersionInclude<ExtArgs> | null
  }


  /**
   * Model HandoverShare
   */

  export type AggregateHandoverShare = {
    _count: HandoverShareCountAggregateOutputType | null
    _avg: HandoverShareAvgAggregateOutputType | null
    _sum: HandoverShareSumAggregateOutputType | null
    _min: HandoverShareMinAggregateOutputType | null
    _max: HandoverShareMaxAggregateOutputType | null
  }

  export type HandoverShareAvgAggregateOutputType = {
    id: number | null
    documentId: number | null
    sharedWithUserId: number | null
    sharedBy: number | null
  }

  export type HandoverShareSumAggregateOutputType = {
    id: number | null
    documentId: number | null
    sharedWithUserId: number | null
    sharedBy: number | null
  }

  export type HandoverShareMinAggregateOutputType = {
    id: number | null
    documentId: number | null
    sharedWithUserId: number | null
    permissionLevel: string | null
    sharedAt: Date | null
    sharedBy: number | null
    expiresAt: Date | null
  }

  export type HandoverShareMaxAggregateOutputType = {
    id: number | null
    documentId: number | null
    sharedWithUserId: number | null
    permissionLevel: string | null
    sharedAt: Date | null
    sharedBy: number | null
    expiresAt: Date | null
  }

  export type HandoverShareCountAggregateOutputType = {
    id: number
    documentId: number
    sharedWithUserId: number
    permissionLevel: number
    sharedAt: number
    sharedBy: number
    expiresAt: number
    _all: number
  }


  export type HandoverShareAvgAggregateInputType = {
    id?: true
    documentId?: true
    sharedWithUserId?: true
    sharedBy?: true
  }

  export type HandoverShareSumAggregateInputType = {
    id?: true
    documentId?: true
    sharedWithUserId?: true
    sharedBy?: true
  }

  export type HandoverShareMinAggregateInputType = {
    id?: true
    documentId?: true
    sharedWithUserId?: true
    permissionLevel?: true
    sharedAt?: true
    sharedBy?: true
    expiresAt?: true
  }

  export type HandoverShareMaxAggregateInputType = {
    id?: true
    documentId?: true
    sharedWithUserId?: true
    permissionLevel?: true
    sharedAt?: true
    sharedBy?: true
    expiresAt?: true
  }

  export type HandoverShareCountAggregateInputType = {
    id?: true
    documentId?: true
    sharedWithUserId?: true
    permissionLevel?: true
    sharedAt?: true
    sharedBy?: true
    expiresAt?: true
    _all?: true
  }

  export type HandoverShareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HandoverShare to aggregate.
     */
    where?: HandoverShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverShares to fetch.
     */
    orderBy?: HandoverShareOrderByWithRelationInput | HandoverShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HandoverShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HandoverShares
    **/
    _count?: true | HandoverShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HandoverShareAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HandoverShareSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HandoverShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HandoverShareMaxAggregateInputType
  }

  export type GetHandoverShareAggregateType<T extends HandoverShareAggregateArgs> = {
        [P in keyof T & keyof AggregateHandoverShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHandoverShare[P]>
      : GetScalarType<T[P], AggregateHandoverShare[P]>
  }




  export type HandoverShareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverShareWhereInput
    orderBy?: HandoverShareOrderByWithAggregationInput | HandoverShareOrderByWithAggregationInput[]
    by: HandoverShareScalarFieldEnum[] | HandoverShareScalarFieldEnum
    having?: HandoverShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HandoverShareCountAggregateInputType | true
    _avg?: HandoverShareAvgAggregateInputType
    _sum?: HandoverShareSumAggregateInputType
    _min?: HandoverShareMinAggregateInputType
    _max?: HandoverShareMaxAggregateInputType
  }

  export type HandoverShareGroupByOutputType = {
    id: number
    documentId: number
    sharedWithUserId: number
    permissionLevel: string
    sharedAt: Date
    sharedBy: number
    expiresAt: Date | null
    _count: HandoverShareCountAggregateOutputType | null
    _avg: HandoverShareAvgAggregateOutputType | null
    _sum: HandoverShareSumAggregateOutputType | null
    _min: HandoverShareMinAggregateOutputType | null
    _max: HandoverShareMaxAggregateOutputType | null
  }

  type GetHandoverShareGroupByPayload<T extends HandoverShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HandoverShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HandoverShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HandoverShareGroupByOutputType[P]>
            : GetScalarType<T[P], HandoverShareGroupByOutputType[P]>
        }
      >
    >


  export type HandoverShareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    sharedWithUserId?: boolean
    permissionLevel?: boolean
    sharedAt?: boolean
    sharedBy?: boolean
    expiresAt?: boolean
    document?: boolean | HandoverDocumentDefaultArgs<ExtArgs>
    sharedWithUser?: boolean | UserDefaultArgs<ExtArgs>
    sharer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["handoverShare"]>

  export type HandoverShareSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    sharedWithUserId?: boolean
    permissionLevel?: boolean
    sharedAt?: boolean
    sharedBy?: boolean
    expiresAt?: boolean
    document?: boolean | HandoverDocumentDefaultArgs<ExtArgs>
    sharedWithUser?: boolean | UserDefaultArgs<ExtArgs>
    sharer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["handoverShare"]>

  export type HandoverShareSelectScalar = {
    id?: boolean
    documentId?: boolean
    sharedWithUserId?: boolean
    permissionLevel?: boolean
    sharedAt?: boolean
    sharedBy?: boolean
    expiresAt?: boolean
  }

  export type HandoverShareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | HandoverDocumentDefaultArgs<ExtArgs>
    sharedWithUser?: boolean | UserDefaultArgs<ExtArgs>
    sharer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HandoverShareIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | HandoverDocumentDefaultArgs<ExtArgs>
    sharedWithUser?: boolean | UserDefaultArgs<ExtArgs>
    sharer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $HandoverSharePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HandoverShare"
    objects: {
      document: Prisma.$HandoverDocumentPayload<ExtArgs>
      sharedWithUser: Prisma.$UserPayload<ExtArgs>
      sharer: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      documentId: number
      sharedWithUserId: number
      permissionLevel: string
      sharedAt: Date
      sharedBy: number
      expiresAt: Date | null
    }, ExtArgs["result"]["handoverShare"]>
    composites: {}
  }

  type HandoverShareGetPayload<S extends boolean | null | undefined | HandoverShareDefaultArgs> = $Result.GetResult<Prisma.$HandoverSharePayload, S>

  type HandoverShareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HandoverShareFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HandoverShareCountAggregateInputType | true
    }

  export interface HandoverShareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HandoverShare'], meta: { name: 'HandoverShare' } }
    /**
     * Find zero or one HandoverShare that matches the filter.
     * @param {HandoverShareFindUniqueArgs} args - Arguments to find a HandoverShare
     * @example
     * // Get one HandoverShare
     * const handoverShare = await prisma.handoverShare.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HandoverShareFindUniqueArgs>(args: SelectSubset<T, HandoverShareFindUniqueArgs<ExtArgs>>): Prisma__HandoverShareClient<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HandoverShare that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HandoverShareFindUniqueOrThrowArgs} args - Arguments to find a HandoverShare
     * @example
     * // Get one HandoverShare
     * const handoverShare = await prisma.handoverShare.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HandoverShareFindUniqueOrThrowArgs>(args: SelectSubset<T, HandoverShareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HandoverShareClient<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HandoverShare that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverShareFindFirstArgs} args - Arguments to find a HandoverShare
     * @example
     * // Get one HandoverShare
     * const handoverShare = await prisma.handoverShare.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HandoverShareFindFirstArgs>(args?: SelectSubset<T, HandoverShareFindFirstArgs<ExtArgs>>): Prisma__HandoverShareClient<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HandoverShare that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverShareFindFirstOrThrowArgs} args - Arguments to find a HandoverShare
     * @example
     * // Get one HandoverShare
     * const handoverShare = await prisma.handoverShare.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HandoverShareFindFirstOrThrowArgs>(args?: SelectSubset<T, HandoverShareFindFirstOrThrowArgs<ExtArgs>>): Prisma__HandoverShareClient<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HandoverShares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverShareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HandoverShares
     * const handoverShares = await prisma.handoverShare.findMany()
     * 
     * // Get first 10 HandoverShares
     * const handoverShares = await prisma.handoverShare.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const handoverShareWithIdOnly = await prisma.handoverShare.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HandoverShareFindManyArgs>(args?: SelectSubset<T, HandoverShareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HandoverShare.
     * @param {HandoverShareCreateArgs} args - Arguments to create a HandoverShare.
     * @example
     * // Create one HandoverShare
     * const HandoverShare = await prisma.handoverShare.create({
     *   data: {
     *     // ... data to create a HandoverShare
     *   }
     * })
     * 
     */
    create<T extends HandoverShareCreateArgs>(args: SelectSubset<T, HandoverShareCreateArgs<ExtArgs>>): Prisma__HandoverShareClient<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HandoverShares.
     * @param {HandoverShareCreateManyArgs} args - Arguments to create many HandoverShares.
     * @example
     * // Create many HandoverShares
     * const handoverShare = await prisma.handoverShare.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HandoverShareCreateManyArgs>(args?: SelectSubset<T, HandoverShareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HandoverShares and returns the data saved in the database.
     * @param {HandoverShareCreateManyAndReturnArgs} args - Arguments to create many HandoverShares.
     * @example
     * // Create many HandoverShares
     * const handoverShare = await prisma.handoverShare.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HandoverShares and only return the `id`
     * const handoverShareWithIdOnly = await prisma.handoverShare.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HandoverShareCreateManyAndReturnArgs>(args?: SelectSubset<T, HandoverShareCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HandoverShare.
     * @param {HandoverShareDeleteArgs} args - Arguments to delete one HandoverShare.
     * @example
     * // Delete one HandoverShare
     * const HandoverShare = await prisma.handoverShare.delete({
     *   where: {
     *     // ... filter to delete one HandoverShare
     *   }
     * })
     * 
     */
    delete<T extends HandoverShareDeleteArgs>(args: SelectSubset<T, HandoverShareDeleteArgs<ExtArgs>>): Prisma__HandoverShareClient<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HandoverShare.
     * @param {HandoverShareUpdateArgs} args - Arguments to update one HandoverShare.
     * @example
     * // Update one HandoverShare
     * const handoverShare = await prisma.handoverShare.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HandoverShareUpdateArgs>(args: SelectSubset<T, HandoverShareUpdateArgs<ExtArgs>>): Prisma__HandoverShareClient<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HandoverShares.
     * @param {HandoverShareDeleteManyArgs} args - Arguments to filter HandoverShares to delete.
     * @example
     * // Delete a few HandoverShares
     * const { count } = await prisma.handoverShare.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HandoverShareDeleteManyArgs>(args?: SelectSubset<T, HandoverShareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HandoverShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HandoverShares
     * const handoverShare = await prisma.handoverShare.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HandoverShareUpdateManyArgs>(args: SelectSubset<T, HandoverShareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HandoverShare.
     * @param {HandoverShareUpsertArgs} args - Arguments to update or create a HandoverShare.
     * @example
     * // Update or create a HandoverShare
     * const handoverShare = await prisma.handoverShare.upsert({
     *   create: {
     *     // ... data to create a HandoverShare
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HandoverShare we want to update
     *   }
     * })
     */
    upsert<T extends HandoverShareUpsertArgs>(args: SelectSubset<T, HandoverShareUpsertArgs<ExtArgs>>): Prisma__HandoverShareClient<$Result.GetResult<Prisma.$HandoverSharePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HandoverShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverShareCountArgs} args - Arguments to filter HandoverShares to count.
     * @example
     * // Count the number of HandoverShares
     * const count = await prisma.handoverShare.count({
     *   where: {
     *     // ... the filter for the HandoverShares we want to count
     *   }
     * })
    **/
    count<T extends HandoverShareCountArgs>(
      args?: Subset<T, HandoverShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HandoverShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HandoverShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HandoverShareAggregateArgs>(args: Subset<T, HandoverShareAggregateArgs>): Prisma.PrismaPromise<GetHandoverShareAggregateType<T>>

    /**
     * Group by HandoverShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HandoverShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HandoverShareGroupByArgs['orderBy'] }
        : { orderBy?: HandoverShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HandoverShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHandoverShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HandoverShare model
   */
  readonly fields: HandoverShareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HandoverShare.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HandoverShareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends HandoverDocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HandoverDocumentDefaultArgs<ExtArgs>>): Prisma__HandoverDocumentClient<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sharedWithUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sharer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HandoverShare model
   */ 
  interface HandoverShareFieldRefs {
    readonly id: FieldRef<"HandoverShare", 'Int'>
    readonly documentId: FieldRef<"HandoverShare", 'Int'>
    readonly sharedWithUserId: FieldRef<"HandoverShare", 'Int'>
    readonly permissionLevel: FieldRef<"HandoverShare", 'String'>
    readonly sharedAt: FieldRef<"HandoverShare", 'DateTime'>
    readonly sharedBy: FieldRef<"HandoverShare", 'Int'>
    readonly expiresAt: FieldRef<"HandoverShare", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HandoverShare findUnique
   */
  export type HandoverShareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
    /**
     * Filter, which HandoverShare to fetch.
     */
    where: HandoverShareWhereUniqueInput
  }

  /**
   * HandoverShare findUniqueOrThrow
   */
  export type HandoverShareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
    /**
     * Filter, which HandoverShare to fetch.
     */
    where: HandoverShareWhereUniqueInput
  }

  /**
   * HandoverShare findFirst
   */
  export type HandoverShareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
    /**
     * Filter, which HandoverShare to fetch.
     */
    where?: HandoverShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverShares to fetch.
     */
    orderBy?: HandoverShareOrderByWithRelationInput | HandoverShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HandoverShares.
     */
    cursor?: HandoverShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HandoverShares.
     */
    distinct?: HandoverShareScalarFieldEnum | HandoverShareScalarFieldEnum[]
  }

  /**
   * HandoverShare findFirstOrThrow
   */
  export type HandoverShareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
    /**
     * Filter, which HandoverShare to fetch.
     */
    where?: HandoverShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverShares to fetch.
     */
    orderBy?: HandoverShareOrderByWithRelationInput | HandoverShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HandoverShares.
     */
    cursor?: HandoverShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HandoverShares.
     */
    distinct?: HandoverShareScalarFieldEnum | HandoverShareScalarFieldEnum[]
  }

  /**
   * HandoverShare findMany
   */
  export type HandoverShareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
    /**
     * Filter, which HandoverShares to fetch.
     */
    where?: HandoverShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverShares to fetch.
     */
    orderBy?: HandoverShareOrderByWithRelationInput | HandoverShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HandoverShares.
     */
    cursor?: HandoverShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverShares.
     */
    skip?: number
    distinct?: HandoverShareScalarFieldEnum | HandoverShareScalarFieldEnum[]
  }

  /**
   * HandoverShare create
   */
  export type HandoverShareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
    /**
     * The data needed to create a HandoverShare.
     */
    data: XOR<HandoverShareCreateInput, HandoverShareUncheckedCreateInput>
  }

  /**
   * HandoverShare createMany
   */
  export type HandoverShareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HandoverShares.
     */
    data: HandoverShareCreateManyInput | HandoverShareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HandoverShare createManyAndReturn
   */
  export type HandoverShareCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HandoverShares.
     */
    data: HandoverShareCreateManyInput | HandoverShareCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HandoverShare update
   */
  export type HandoverShareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
    /**
     * The data needed to update a HandoverShare.
     */
    data: XOR<HandoverShareUpdateInput, HandoverShareUncheckedUpdateInput>
    /**
     * Choose, which HandoverShare to update.
     */
    where: HandoverShareWhereUniqueInput
  }

  /**
   * HandoverShare updateMany
   */
  export type HandoverShareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HandoverShares.
     */
    data: XOR<HandoverShareUpdateManyMutationInput, HandoverShareUncheckedUpdateManyInput>
    /**
     * Filter which HandoverShares to update
     */
    where?: HandoverShareWhereInput
  }

  /**
   * HandoverShare upsert
   */
  export type HandoverShareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
    /**
     * The filter to search for the HandoverShare to update in case it exists.
     */
    where: HandoverShareWhereUniqueInput
    /**
     * In case the HandoverShare found by the `where` argument doesn't exist, create a new HandoverShare with this data.
     */
    create: XOR<HandoverShareCreateInput, HandoverShareUncheckedCreateInput>
    /**
     * In case the HandoverShare was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HandoverShareUpdateInput, HandoverShareUncheckedUpdateInput>
  }

  /**
   * HandoverShare delete
   */
  export type HandoverShareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
    /**
     * Filter which HandoverShare to delete.
     */
    where: HandoverShareWhereUniqueInput
  }

  /**
   * HandoverShare deleteMany
   */
  export type HandoverShareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HandoverShares to delete
     */
    where?: HandoverShareWhereInput
  }

  /**
   * HandoverShare without action
   */
  export type HandoverShareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverShare
     */
    select?: HandoverShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverShareInclude<ExtArgs> | null
  }


  /**
   * Model HandoverComment
   */

  export type AggregateHandoverComment = {
    _count: HandoverCommentCountAggregateOutputType | null
    _avg: HandoverCommentAvgAggregateOutputType | null
    _sum: HandoverCommentSumAggregateOutputType | null
    _min: HandoverCommentMinAggregateOutputType | null
    _max: HandoverCommentMaxAggregateOutputType | null
  }

  export type HandoverCommentAvgAggregateOutputType = {
    id: number | null
    documentId: number | null
    authorId: number | null
    parentCommentId: number | null
  }

  export type HandoverCommentSumAggregateOutputType = {
    id: number | null
    documentId: number | null
    authorId: number | null
    parentCommentId: number | null
  }

  export type HandoverCommentMinAggregateOutputType = {
    id: number | null
    documentId: number | null
    authorId: number | null
    content: string | null
    parentCommentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type HandoverCommentMaxAggregateOutputType = {
    id: number | null
    documentId: number | null
    authorId: number | null
    content: string | null
    parentCommentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type HandoverCommentCountAggregateOutputType = {
    id: number
    documentId: number
    authorId: number
    content: number
    parentCommentId: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    _all: number
  }


  export type HandoverCommentAvgAggregateInputType = {
    id?: true
    documentId?: true
    authorId?: true
    parentCommentId?: true
  }

  export type HandoverCommentSumAggregateInputType = {
    id?: true
    documentId?: true
    authorId?: true
    parentCommentId?: true
  }

  export type HandoverCommentMinAggregateInputType = {
    id?: true
    documentId?: true
    authorId?: true
    content?: true
    parentCommentId?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type HandoverCommentMaxAggregateInputType = {
    id?: true
    documentId?: true
    authorId?: true
    content?: true
    parentCommentId?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type HandoverCommentCountAggregateInputType = {
    id?: true
    documentId?: true
    authorId?: true
    content?: true
    parentCommentId?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type HandoverCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HandoverComment to aggregate.
     */
    where?: HandoverCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverComments to fetch.
     */
    orderBy?: HandoverCommentOrderByWithRelationInput | HandoverCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HandoverCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HandoverComments
    **/
    _count?: true | HandoverCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HandoverCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HandoverCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HandoverCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HandoverCommentMaxAggregateInputType
  }

  export type GetHandoverCommentAggregateType<T extends HandoverCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateHandoverComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHandoverComment[P]>
      : GetScalarType<T[P], AggregateHandoverComment[P]>
  }




  export type HandoverCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HandoverCommentWhereInput
    orderBy?: HandoverCommentOrderByWithAggregationInput | HandoverCommentOrderByWithAggregationInput[]
    by: HandoverCommentScalarFieldEnum[] | HandoverCommentScalarFieldEnum
    having?: HandoverCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HandoverCommentCountAggregateInputType | true
    _avg?: HandoverCommentAvgAggregateInputType
    _sum?: HandoverCommentSumAggregateInputType
    _min?: HandoverCommentMinAggregateInputType
    _max?: HandoverCommentMaxAggregateInputType
  }

  export type HandoverCommentGroupByOutputType = {
    id: number
    documentId: number
    authorId: number
    content: string
    parentCommentId: number | null
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    _count: HandoverCommentCountAggregateOutputType | null
    _avg: HandoverCommentAvgAggregateOutputType | null
    _sum: HandoverCommentSumAggregateOutputType | null
    _min: HandoverCommentMinAggregateOutputType | null
    _max: HandoverCommentMaxAggregateOutputType | null
  }

  type GetHandoverCommentGroupByPayload<T extends HandoverCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HandoverCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HandoverCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HandoverCommentGroupByOutputType[P]>
            : GetScalarType<T[P], HandoverCommentGroupByOutputType[P]>
        }
      >
    >


  export type HandoverCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    authorId?: boolean
    content?: boolean
    parentCommentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    document?: boolean | HandoverDocumentDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    parentComment?: boolean | HandoverComment$parentCommentArgs<ExtArgs>
    replies?: boolean | HandoverComment$repliesArgs<ExtArgs>
    _count?: boolean | HandoverCommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["handoverComment"]>

  export type HandoverCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    authorId?: boolean
    content?: boolean
    parentCommentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    document?: boolean | HandoverDocumentDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    parentComment?: boolean | HandoverComment$parentCommentArgs<ExtArgs>
  }, ExtArgs["result"]["handoverComment"]>

  export type HandoverCommentSelectScalar = {
    id?: boolean
    documentId?: boolean
    authorId?: boolean
    content?: boolean
    parentCommentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
  }

  export type HandoverCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | HandoverDocumentDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    parentComment?: boolean | HandoverComment$parentCommentArgs<ExtArgs>
    replies?: boolean | HandoverComment$repliesArgs<ExtArgs>
    _count?: boolean | HandoverCommentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HandoverCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | HandoverDocumentDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    parentComment?: boolean | HandoverComment$parentCommentArgs<ExtArgs>
  }

  export type $HandoverCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HandoverComment"
    objects: {
      document: Prisma.$HandoverDocumentPayload<ExtArgs>
      author: Prisma.$UserPayload<ExtArgs>
      parentComment: Prisma.$HandoverCommentPayload<ExtArgs> | null
      replies: Prisma.$HandoverCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      documentId: number
      authorId: number
      content: string
      parentCommentId: number | null
      createdAt: Date
      updatedAt: Date
      isDeleted: boolean
    }, ExtArgs["result"]["handoverComment"]>
    composites: {}
  }

  type HandoverCommentGetPayload<S extends boolean | null | undefined | HandoverCommentDefaultArgs> = $Result.GetResult<Prisma.$HandoverCommentPayload, S>

  type HandoverCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HandoverCommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HandoverCommentCountAggregateInputType | true
    }

  export interface HandoverCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HandoverComment'], meta: { name: 'HandoverComment' } }
    /**
     * Find zero or one HandoverComment that matches the filter.
     * @param {HandoverCommentFindUniqueArgs} args - Arguments to find a HandoverComment
     * @example
     * // Get one HandoverComment
     * const handoverComment = await prisma.handoverComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HandoverCommentFindUniqueArgs>(args: SelectSubset<T, HandoverCommentFindUniqueArgs<ExtArgs>>): Prisma__HandoverCommentClient<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HandoverComment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HandoverCommentFindUniqueOrThrowArgs} args - Arguments to find a HandoverComment
     * @example
     * // Get one HandoverComment
     * const handoverComment = await prisma.handoverComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HandoverCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, HandoverCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HandoverCommentClient<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HandoverComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverCommentFindFirstArgs} args - Arguments to find a HandoverComment
     * @example
     * // Get one HandoverComment
     * const handoverComment = await prisma.handoverComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HandoverCommentFindFirstArgs>(args?: SelectSubset<T, HandoverCommentFindFirstArgs<ExtArgs>>): Prisma__HandoverCommentClient<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HandoverComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverCommentFindFirstOrThrowArgs} args - Arguments to find a HandoverComment
     * @example
     * // Get one HandoverComment
     * const handoverComment = await prisma.handoverComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HandoverCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, HandoverCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__HandoverCommentClient<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HandoverComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HandoverComments
     * const handoverComments = await prisma.handoverComment.findMany()
     * 
     * // Get first 10 HandoverComments
     * const handoverComments = await prisma.handoverComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const handoverCommentWithIdOnly = await prisma.handoverComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HandoverCommentFindManyArgs>(args?: SelectSubset<T, HandoverCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HandoverComment.
     * @param {HandoverCommentCreateArgs} args - Arguments to create a HandoverComment.
     * @example
     * // Create one HandoverComment
     * const HandoverComment = await prisma.handoverComment.create({
     *   data: {
     *     // ... data to create a HandoverComment
     *   }
     * })
     * 
     */
    create<T extends HandoverCommentCreateArgs>(args: SelectSubset<T, HandoverCommentCreateArgs<ExtArgs>>): Prisma__HandoverCommentClient<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HandoverComments.
     * @param {HandoverCommentCreateManyArgs} args - Arguments to create many HandoverComments.
     * @example
     * // Create many HandoverComments
     * const handoverComment = await prisma.handoverComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HandoverCommentCreateManyArgs>(args?: SelectSubset<T, HandoverCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HandoverComments and returns the data saved in the database.
     * @param {HandoverCommentCreateManyAndReturnArgs} args - Arguments to create many HandoverComments.
     * @example
     * // Create many HandoverComments
     * const handoverComment = await prisma.handoverComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HandoverComments and only return the `id`
     * const handoverCommentWithIdOnly = await prisma.handoverComment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HandoverCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, HandoverCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HandoverComment.
     * @param {HandoverCommentDeleteArgs} args - Arguments to delete one HandoverComment.
     * @example
     * // Delete one HandoverComment
     * const HandoverComment = await prisma.handoverComment.delete({
     *   where: {
     *     // ... filter to delete one HandoverComment
     *   }
     * })
     * 
     */
    delete<T extends HandoverCommentDeleteArgs>(args: SelectSubset<T, HandoverCommentDeleteArgs<ExtArgs>>): Prisma__HandoverCommentClient<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HandoverComment.
     * @param {HandoverCommentUpdateArgs} args - Arguments to update one HandoverComment.
     * @example
     * // Update one HandoverComment
     * const handoverComment = await prisma.handoverComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HandoverCommentUpdateArgs>(args: SelectSubset<T, HandoverCommentUpdateArgs<ExtArgs>>): Prisma__HandoverCommentClient<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HandoverComments.
     * @param {HandoverCommentDeleteManyArgs} args - Arguments to filter HandoverComments to delete.
     * @example
     * // Delete a few HandoverComments
     * const { count } = await prisma.handoverComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HandoverCommentDeleteManyArgs>(args?: SelectSubset<T, HandoverCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HandoverComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HandoverComments
     * const handoverComment = await prisma.handoverComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HandoverCommentUpdateManyArgs>(args: SelectSubset<T, HandoverCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HandoverComment.
     * @param {HandoverCommentUpsertArgs} args - Arguments to update or create a HandoverComment.
     * @example
     * // Update or create a HandoverComment
     * const handoverComment = await prisma.handoverComment.upsert({
     *   create: {
     *     // ... data to create a HandoverComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HandoverComment we want to update
     *   }
     * })
     */
    upsert<T extends HandoverCommentUpsertArgs>(args: SelectSubset<T, HandoverCommentUpsertArgs<ExtArgs>>): Prisma__HandoverCommentClient<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HandoverComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverCommentCountArgs} args - Arguments to filter HandoverComments to count.
     * @example
     * // Count the number of HandoverComments
     * const count = await prisma.handoverComment.count({
     *   where: {
     *     // ... the filter for the HandoverComments we want to count
     *   }
     * })
    **/
    count<T extends HandoverCommentCountArgs>(
      args?: Subset<T, HandoverCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HandoverCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HandoverComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HandoverCommentAggregateArgs>(args: Subset<T, HandoverCommentAggregateArgs>): Prisma.PrismaPromise<GetHandoverCommentAggregateType<T>>

    /**
     * Group by HandoverComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HandoverCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HandoverCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HandoverCommentGroupByArgs['orderBy'] }
        : { orderBy?: HandoverCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HandoverCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHandoverCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HandoverComment model
   */
  readonly fields: HandoverCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HandoverComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HandoverCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends HandoverDocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HandoverDocumentDefaultArgs<ExtArgs>>): Prisma__HandoverDocumentClient<$Result.GetResult<Prisma.$HandoverDocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    parentComment<T extends HandoverComment$parentCommentArgs<ExtArgs> = {}>(args?: Subset<T, HandoverComment$parentCommentArgs<ExtArgs>>): Prisma__HandoverCommentClient<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    replies<T extends HandoverComment$repliesArgs<ExtArgs> = {}>(args?: Subset<T, HandoverComment$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HandoverCommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HandoverComment model
   */ 
  interface HandoverCommentFieldRefs {
    readonly id: FieldRef<"HandoverComment", 'Int'>
    readonly documentId: FieldRef<"HandoverComment", 'Int'>
    readonly authorId: FieldRef<"HandoverComment", 'Int'>
    readonly content: FieldRef<"HandoverComment", 'String'>
    readonly parentCommentId: FieldRef<"HandoverComment", 'Int'>
    readonly createdAt: FieldRef<"HandoverComment", 'DateTime'>
    readonly updatedAt: FieldRef<"HandoverComment", 'DateTime'>
    readonly isDeleted: FieldRef<"HandoverComment", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * HandoverComment findUnique
   */
  export type HandoverCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    /**
     * Filter, which HandoverComment to fetch.
     */
    where: HandoverCommentWhereUniqueInput
  }

  /**
   * HandoverComment findUniqueOrThrow
   */
  export type HandoverCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    /**
     * Filter, which HandoverComment to fetch.
     */
    where: HandoverCommentWhereUniqueInput
  }

  /**
   * HandoverComment findFirst
   */
  export type HandoverCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    /**
     * Filter, which HandoverComment to fetch.
     */
    where?: HandoverCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverComments to fetch.
     */
    orderBy?: HandoverCommentOrderByWithRelationInput | HandoverCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HandoverComments.
     */
    cursor?: HandoverCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HandoverComments.
     */
    distinct?: HandoverCommentScalarFieldEnum | HandoverCommentScalarFieldEnum[]
  }

  /**
   * HandoverComment findFirstOrThrow
   */
  export type HandoverCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    /**
     * Filter, which HandoverComment to fetch.
     */
    where?: HandoverCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverComments to fetch.
     */
    orderBy?: HandoverCommentOrderByWithRelationInput | HandoverCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HandoverComments.
     */
    cursor?: HandoverCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HandoverComments.
     */
    distinct?: HandoverCommentScalarFieldEnum | HandoverCommentScalarFieldEnum[]
  }

  /**
   * HandoverComment findMany
   */
  export type HandoverCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    /**
     * Filter, which HandoverComments to fetch.
     */
    where?: HandoverCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HandoverComments to fetch.
     */
    orderBy?: HandoverCommentOrderByWithRelationInput | HandoverCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HandoverComments.
     */
    cursor?: HandoverCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HandoverComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HandoverComments.
     */
    skip?: number
    distinct?: HandoverCommentScalarFieldEnum | HandoverCommentScalarFieldEnum[]
  }

  /**
   * HandoverComment create
   */
  export type HandoverCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a HandoverComment.
     */
    data: XOR<HandoverCommentCreateInput, HandoverCommentUncheckedCreateInput>
  }

  /**
   * HandoverComment createMany
   */
  export type HandoverCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HandoverComments.
     */
    data: HandoverCommentCreateManyInput | HandoverCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HandoverComment createManyAndReturn
   */
  export type HandoverCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HandoverComments.
     */
    data: HandoverCommentCreateManyInput | HandoverCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HandoverComment update
   */
  export type HandoverCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a HandoverComment.
     */
    data: XOR<HandoverCommentUpdateInput, HandoverCommentUncheckedUpdateInput>
    /**
     * Choose, which HandoverComment to update.
     */
    where: HandoverCommentWhereUniqueInput
  }

  /**
   * HandoverComment updateMany
   */
  export type HandoverCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HandoverComments.
     */
    data: XOR<HandoverCommentUpdateManyMutationInput, HandoverCommentUncheckedUpdateManyInput>
    /**
     * Filter which HandoverComments to update
     */
    where?: HandoverCommentWhereInput
  }

  /**
   * HandoverComment upsert
   */
  export type HandoverCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the HandoverComment to update in case it exists.
     */
    where: HandoverCommentWhereUniqueInput
    /**
     * In case the HandoverComment found by the `where` argument doesn't exist, create a new HandoverComment with this data.
     */
    create: XOR<HandoverCommentCreateInput, HandoverCommentUncheckedCreateInput>
    /**
     * In case the HandoverComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HandoverCommentUpdateInput, HandoverCommentUncheckedUpdateInput>
  }

  /**
   * HandoverComment delete
   */
  export type HandoverCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    /**
     * Filter which HandoverComment to delete.
     */
    where: HandoverCommentWhereUniqueInput
  }

  /**
   * HandoverComment deleteMany
   */
  export type HandoverCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HandoverComments to delete
     */
    where?: HandoverCommentWhereInput
  }

  /**
   * HandoverComment.parentComment
   */
  export type HandoverComment$parentCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    where?: HandoverCommentWhereInput
  }

  /**
   * HandoverComment.replies
   */
  export type HandoverComment$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
    where?: HandoverCommentWhereInput
    orderBy?: HandoverCommentOrderByWithRelationInput | HandoverCommentOrderByWithRelationInput[]
    cursor?: HandoverCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HandoverCommentScalarFieldEnum | HandoverCommentScalarFieldEnum[]
  }

  /**
   * HandoverComment without action
   */
  export type HandoverCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HandoverComment
     */
    select?: HandoverCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HandoverCommentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    fullName: 'fullName',
    department: 'department',
    position: 'position',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const HandoverDocumentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    authorId: 'authorId',
    status: 'status',
    priority: 'priority',
    category: 'category',
    tags: 'tags',
    mongoId: 'mongoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    completedAt: 'completedAt',
    archivedAt: 'archivedAt'
  };

  export type HandoverDocumentScalarFieldEnum = (typeof HandoverDocumentScalarFieldEnum)[keyof typeof HandoverDocumentScalarFieldEnum]


  export const HandoverVersionScalarFieldEnum: {
    id: 'id',
    documentId: 'documentId',
    versionNumber: 'versionNumber',
    mongoId: 'mongoId',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    changeSummary: 'changeSummary'
  };

  export type HandoverVersionScalarFieldEnum = (typeof HandoverVersionScalarFieldEnum)[keyof typeof HandoverVersionScalarFieldEnum]


  export const HandoverShareScalarFieldEnum: {
    id: 'id',
    documentId: 'documentId',
    sharedWithUserId: 'sharedWithUserId',
    permissionLevel: 'permissionLevel',
    sharedAt: 'sharedAt',
    sharedBy: 'sharedBy',
    expiresAt: 'expiresAt'
  };

  export type HandoverShareScalarFieldEnum = (typeof HandoverShareScalarFieldEnum)[keyof typeof HandoverShareScalarFieldEnum]


  export const HandoverCommentScalarFieldEnum: {
    id: 'id',
    documentId: 'documentId',
    authorId: 'authorId',
    content: 'content',
    parentCommentId: 'parentCommentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted'
  };

  export type HandoverCommentScalarFieldEnum = (typeof HandoverCommentScalarFieldEnum)[keyof typeof HandoverCommentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    department?: StringNullableFilter<"User"> | string | null
    position?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isActive?: BoolFilter<"User"> | boolean
    handovers?: HandoverDocumentListRelationFilter
    comments?: HandoverCommentListRelationFilter
    versions?: HandoverVersionListRelationFilter
    shares?: HandoverShareListRelationFilter
    sharesReceived?: HandoverShareListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    handovers?: HandoverDocumentOrderByRelationAggregateInput
    comments?: HandoverCommentOrderByRelationAggregateInput
    versions?: HandoverVersionOrderByRelationAggregateInput
    shares?: HandoverShareOrderByRelationAggregateInput
    sharesReceived?: HandoverShareOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullName?: StringFilter<"User"> | string
    department?: StringNullableFilter<"User"> | string | null
    position?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isActive?: BoolFilter<"User"> | boolean
    handovers?: HandoverDocumentListRelationFilter
    comments?: HandoverCommentListRelationFilter
    versions?: HandoverVersionListRelationFilter
    shares?: HandoverShareListRelationFilter
    sharesReceived?: HandoverShareListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringWithAggregatesFilter<"User"> | string
    department?: StringNullableWithAggregatesFilter<"User"> | string | null
    position?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type HandoverDocumentWhereInput = {
    AND?: HandoverDocumentWhereInput | HandoverDocumentWhereInput[]
    OR?: HandoverDocumentWhereInput[]
    NOT?: HandoverDocumentWhereInput | HandoverDocumentWhereInput[]
    id?: IntFilter<"HandoverDocument"> | number
    title?: StringFilter<"HandoverDocument"> | string
    authorId?: IntFilter<"HandoverDocument"> | number
    status?: StringFilter<"HandoverDocument"> | string
    priority?: StringFilter<"HandoverDocument"> | string
    category?: StringNullableFilter<"HandoverDocument"> | string | null
    tags?: StringNullableListFilter<"HandoverDocument">
    mongoId?: StringFilter<"HandoverDocument"> | string
    createdAt?: DateTimeFilter<"HandoverDocument"> | Date | string
    updatedAt?: DateTimeFilter<"HandoverDocument"> | Date | string
    completedAt?: DateTimeNullableFilter<"HandoverDocument"> | Date | string | null
    archivedAt?: DateTimeNullableFilter<"HandoverDocument"> | Date | string | null
    author?: XOR<UserRelationFilter, UserWhereInput>
    versions?: HandoverVersionListRelationFilter
    shares?: HandoverShareListRelationFilter
    comments?: HandoverCommentListRelationFilter
  }

  export type HandoverDocumentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    category?: SortOrderInput | SortOrder
    tags?: SortOrder
    mongoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    archivedAt?: SortOrderInput | SortOrder
    author?: UserOrderByWithRelationInput
    versions?: HandoverVersionOrderByRelationAggregateInput
    shares?: HandoverShareOrderByRelationAggregateInput
    comments?: HandoverCommentOrderByRelationAggregateInput
  }

  export type HandoverDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    mongoId?: string
    AND?: HandoverDocumentWhereInput | HandoverDocumentWhereInput[]
    OR?: HandoverDocumentWhereInput[]
    NOT?: HandoverDocumentWhereInput | HandoverDocumentWhereInput[]
    title?: StringFilter<"HandoverDocument"> | string
    authorId?: IntFilter<"HandoverDocument"> | number
    status?: StringFilter<"HandoverDocument"> | string
    priority?: StringFilter<"HandoverDocument"> | string
    category?: StringNullableFilter<"HandoverDocument"> | string | null
    tags?: StringNullableListFilter<"HandoverDocument">
    createdAt?: DateTimeFilter<"HandoverDocument"> | Date | string
    updatedAt?: DateTimeFilter<"HandoverDocument"> | Date | string
    completedAt?: DateTimeNullableFilter<"HandoverDocument"> | Date | string | null
    archivedAt?: DateTimeNullableFilter<"HandoverDocument"> | Date | string | null
    author?: XOR<UserRelationFilter, UserWhereInput>
    versions?: HandoverVersionListRelationFilter
    shares?: HandoverShareListRelationFilter
    comments?: HandoverCommentListRelationFilter
  }, "id" | "mongoId">

  export type HandoverDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    category?: SortOrderInput | SortOrder
    tags?: SortOrder
    mongoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    archivedAt?: SortOrderInput | SortOrder
    _count?: HandoverDocumentCountOrderByAggregateInput
    _avg?: HandoverDocumentAvgOrderByAggregateInput
    _max?: HandoverDocumentMaxOrderByAggregateInput
    _min?: HandoverDocumentMinOrderByAggregateInput
    _sum?: HandoverDocumentSumOrderByAggregateInput
  }

  export type HandoverDocumentScalarWhereWithAggregatesInput = {
    AND?: HandoverDocumentScalarWhereWithAggregatesInput | HandoverDocumentScalarWhereWithAggregatesInput[]
    OR?: HandoverDocumentScalarWhereWithAggregatesInput[]
    NOT?: HandoverDocumentScalarWhereWithAggregatesInput | HandoverDocumentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HandoverDocument"> | number
    title?: StringWithAggregatesFilter<"HandoverDocument"> | string
    authorId?: IntWithAggregatesFilter<"HandoverDocument"> | number
    status?: StringWithAggregatesFilter<"HandoverDocument"> | string
    priority?: StringWithAggregatesFilter<"HandoverDocument"> | string
    category?: StringNullableWithAggregatesFilter<"HandoverDocument"> | string | null
    tags?: StringNullableListFilter<"HandoverDocument">
    mongoId?: StringWithAggregatesFilter<"HandoverDocument"> | string
    createdAt?: DateTimeWithAggregatesFilter<"HandoverDocument"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HandoverDocument"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"HandoverDocument"> | Date | string | null
    archivedAt?: DateTimeNullableWithAggregatesFilter<"HandoverDocument"> | Date | string | null
  }

  export type HandoverVersionWhereInput = {
    AND?: HandoverVersionWhereInput | HandoverVersionWhereInput[]
    OR?: HandoverVersionWhereInput[]
    NOT?: HandoverVersionWhereInput | HandoverVersionWhereInput[]
    id?: IntFilter<"HandoverVersion"> | number
    documentId?: IntFilter<"HandoverVersion"> | number
    versionNumber?: IntFilter<"HandoverVersion"> | number
    mongoId?: StringFilter<"HandoverVersion"> | string
    createdAt?: DateTimeFilter<"HandoverVersion"> | Date | string
    createdBy?: IntFilter<"HandoverVersion"> | number
    changeSummary?: StringNullableFilter<"HandoverVersion"> | string | null
    document?: XOR<HandoverDocumentRelationFilter, HandoverDocumentWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type HandoverVersionOrderByWithRelationInput = {
    id?: SortOrder
    documentId?: SortOrder
    versionNumber?: SortOrder
    mongoId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    changeSummary?: SortOrderInput | SortOrder
    document?: HandoverDocumentOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
  }

  export type HandoverVersionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HandoverVersionWhereInput | HandoverVersionWhereInput[]
    OR?: HandoverVersionWhereInput[]
    NOT?: HandoverVersionWhereInput | HandoverVersionWhereInput[]
    documentId?: IntFilter<"HandoverVersion"> | number
    versionNumber?: IntFilter<"HandoverVersion"> | number
    mongoId?: StringFilter<"HandoverVersion"> | string
    createdAt?: DateTimeFilter<"HandoverVersion"> | Date | string
    createdBy?: IntFilter<"HandoverVersion"> | number
    changeSummary?: StringNullableFilter<"HandoverVersion"> | string | null
    document?: XOR<HandoverDocumentRelationFilter, HandoverDocumentWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type HandoverVersionOrderByWithAggregationInput = {
    id?: SortOrder
    documentId?: SortOrder
    versionNumber?: SortOrder
    mongoId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    changeSummary?: SortOrderInput | SortOrder
    _count?: HandoverVersionCountOrderByAggregateInput
    _avg?: HandoverVersionAvgOrderByAggregateInput
    _max?: HandoverVersionMaxOrderByAggregateInput
    _min?: HandoverVersionMinOrderByAggregateInput
    _sum?: HandoverVersionSumOrderByAggregateInput
  }

  export type HandoverVersionScalarWhereWithAggregatesInput = {
    AND?: HandoverVersionScalarWhereWithAggregatesInput | HandoverVersionScalarWhereWithAggregatesInput[]
    OR?: HandoverVersionScalarWhereWithAggregatesInput[]
    NOT?: HandoverVersionScalarWhereWithAggregatesInput | HandoverVersionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HandoverVersion"> | number
    documentId?: IntWithAggregatesFilter<"HandoverVersion"> | number
    versionNumber?: IntWithAggregatesFilter<"HandoverVersion"> | number
    mongoId?: StringWithAggregatesFilter<"HandoverVersion"> | string
    createdAt?: DateTimeWithAggregatesFilter<"HandoverVersion"> | Date | string
    createdBy?: IntWithAggregatesFilter<"HandoverVersion"> | number
    changeSummary?: StringNullableWithAggregatesFilter<"HandoverVersion"> | string | null
  }

  export type HandoverShareWhereInput = {
    AND?: HandoverShareWhereInput | HandoverShareWhereInput[]
    OR?: HandoverShareWhereInput[]
    NOT?: HandoverShareWhereInput | HandoverShareWhereInput[]
    id?: IntFilter<"HandoverShare"> | number
    documentId?: IntFilter<"HandoverShare"> | number
    sharedWithUserId?: IntFilter<"HandoverShare"> | number
    permissionLevel?: StringFilter<"HandoverShare"> | string
    sharedAt?: DateTimeFilter<"HandoverShare"> | Date | string
    sharedBy?: IntFilter<"HandoverShare"> | number
    expiresAt?: DateTimeNullableFilter<"HandoverShare"> | Date | string | null
    document?: XOR<HandoverDocumentRelationFilter, HandoverDocumentWhereInput>
    sharedWithUser?: XOR<UserRelationFilter, UserWhereInput>
    sharer?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type HandoverShareOrderByWithRelationInput = {
    id?: SortOrder
    documentId?: SortOrder
    sharedWithUserId?: SortOrder
    permissionLevel?: SortOrder
    sharedAt?: SortOrder
    sharedBy?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    document?: HandoverDocumentOrderByWithRelationInput
    sharedWithUser?: UserOrderByWithRelationInput
    sharer?: UserOrderByWithRelationInput
  }

  export type HandoverShareWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HandoverShareWhereInput | HandoverShareWhereInput[]
    OR?: HandoverShareWhereInput[]
    NOT?: HandoverShareWhereInput | HandoverShareWhereInput[]
    documentId?: IntFilter<"HandoverShare"> | number
    sharedWithUserId?: IntFilter<"HandoverShare"> | number
    permissionLevel?: StringFilter<"HandoverShare"> | string
    sharedAt?: DateTimeFilter<"HandoverShare"> | Date | string
    sharedBy?: IntFilter<"HandoverShare"> | number
    expiresAt?: DateTimeNullableFilter<"HandoverShare"> | Date | string | null
    document?: XOR<HandoverDocumentRelationFilter, HandoverDocumentWhereInput>
    sharedWithUser?: XOR<UserRelationFilter, UserWhereInput>
    sharer?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type HandoverShareOrderByWithAggregationInput = {
    id?: SortOrder
    documentId?: SortOrder
    sharedWithUserId?: SortOrder
    permissionLevel?: SortOrder
    sharedAt?: SortOrder
    sharedBy?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    _count?: HandoverShareCountOrderByAggregateInput
    _avg?: HandoverShareAvgOrderByAggregateInput
    _max?: HandoverShareMaxOrderByAggregateInput
    _min?: HandoverShareMinOrderByAggregateInput
    _sum?: HandoverShareSumOrderByAggregateInput
  }

  export type HandoverShareScalarWhereWithAggregatesInput = {
    AND?: HandoverShareScalarWhereWithAggregatesInput | HandoverShareScalarWhereWithAggregatesInput[]
    OR?: HandoverShareScalarWhereWithAggregatesInput[]
    NOT?: HandoverShareScalarWhereWithAggregatesInput | HandoverShareScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HandoverShare"> | number
    documentId?: IntWithAggregatesFilter<"HandoverShare"> | number
    sharedWithUserId?: IntWithAggregatesFilter<"HandoverShare"> | number
    permissionLevel?: StringWithAggregatesFilter<"HandoverShare"> | string
    sharedAt?: DateTimeWithAggregatesFilter<"HandoverShare"> | Date | string
    sharedBy?: IntWithAggregatesFilter<"HandoverShare"> | number
    expiresAt?: DateTimeNullableWithAggregatesFilter<"HandoverShare"> | Date | string | null
  }

  export type HandoverCommentWhereInput = {
    AND?: HandoverCommentWhereInput | HandoverCommentWhereInput[]
    OR?: HandoverCommentWhereInput[]
    NOT?: HandoverCommentWhereInput | HandoverCommentWhereInput[]
    id?: IntFilter<"HandoverComment"> | number
    documentId?: IntFilter<"HandoverComment"> | number
    authorId?: IntFilter<"HandoverComment"> | number
    content?: StringFilter<"HandoverComment"> | string
    parentCommentId?: IntNullableFilter<"HandoverComment"> | number | null
    createdAt?: DateTimeFilter<"HandoverComment"> | Date | string
    updatedAt?: DateTimeFilter<"HandoverComment"> | Date | string
    isDeleted?: BoolFilter<"HandoverComment"> | boolean
    document?: XOR<HandoverDocumentRelationFilter, HandoverDocumentWhereInput>
    author?: XOR<UserRelationFilter, UserWhereInput>
    parentComment?: XOR<HandoverCommentNullableRelationFilter, HandoverCommentWhereInput> | null
    replies?: HandoverCommentListRelationFilter
  }

  export type HandoverCommentOrderByWithRelationInput = {
    id?: SortOrder
    documentId?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    parentCommentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    document?: HandoverDocumentOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
    parentComment?: HandoverCommentOrderByWithRelationInput
    replies?: HandoverCommentOrderByRelationAggregateInput
  }

  export type HandoverCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HandoverCommentWhereInput | HandoverCommentWhereInput[]
    OR?: HandoverCommentWhereInput[]
    NOT?: HandoverCommentWhereInput | HandoverCommentWhereInput[]
    documentId?: IntFilter<"HandoverComment"> | number
    authorId?: IntFilter<"HandoverComment"> | number
    content?: StringFilter<"HandoverComment"> | string
    parentCommentId?: IntNullableFilter<"HandoverComment"> | number | null
    createdAt?: DateTimeFilter<"HandoverComment"> | Date | string
    updatedAt?: DateTimeFilter<"HandoverComment"> | Date | string
    isDeleted?: BoolFilter<"HandoverComment"> | boolean
    document?: XOR<HandoverDocumentRelationFilter, HandoverDocumentWhereInput>
    author?: XOR<UserRelationFilter, UserWhereInput>
    parentComment?: XOR<HandoverCommentNullableRelationFilter, HandoverCommentWhereInput> | null
    replies?: HandoverCommentListRelationFilter
  }, "id">

  export type HandoverCommentOrderByWithAggregationInput = {
    id?: SortOrder
    documentId?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    parentCommentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    _count?: HandoverCommentCountOrderByAggregateInput
    _avg?: HandoverCommentAvgOrderByAggregateInput
    _max?: HandoverCommentMaxOrderByAggregateInput
    _min?: HandoverCommentMinOrderByAggregateInput
    _sum?: HandoverCommentSumOrderByAggregateInput
  }

  export type HandoverCommentScalarWhereWithAggregatesInput = {
    AND?: HandoverCommentScalarWhereWithAggregatesInput | HandoverCommentScalarWhereWithAggregatesInput[]
    OR?: HandoverCommentScalarWhereWithAggregatesInput[]
    NOT?: HandoverCommentScalarWhereWithAggregatesInput | HandoverCommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HandoverComment"> | number
    documentId?: IntWithAggregatesFilter<"HandoverComment"> | number
    authorId?: IntWithAggregatesFilter<"HandoverComment"> | number
    content?: StringWithAggregatesFilter<"HandoverComment"> | string
    parentCommentId?: IntNullableWithAggregatesFilter<"HandoverComment"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"HandoverComment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HandoverComment"> | Date | string
    isDeleted?: BoolWithAggregatesFilter<"HandoverComment"> | boolean
  }

  export type UserCreateInput = {
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    handovers?: HandoverDocumentCreateNestedManyWithoutAuthorInput
    comments?: HandoverCommentCreateNestedManyWithoutAuthorInput
    versions?: HandoverVersionCreateNestedManyWithoutCreatorInput
    shares?: HandoverShareCreateNestedManyWithoutSharerInput
    sharesReceived?: HandoverShareCreateNestedManyWithoutSharedWithUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    handovers?: HandoverDocumentUncheckedCreateNestedManyWithoutAuthorInput
    comments?: HandoverCommentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: HandoverVersionUncheckedCreateNestedManyWithoutCreatorInput
    shares?: HandoverShareUncheckedCreateNestedManyWithoutSharerInput
    sharesReceived?: HandoverShareUncheckedCreateNestedManyWithoutSharedWithUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    handovers?: HandoverDocumentUpdateManyWithoutAuthorNestedInput
    comments?: HandoverCommentUpdateManyWithoutAuthorNestedInput
    versions?: HandoverVersionUpdateManyWithoutCreatorNestedInput
    shares?: HandoverShareUpdateManyWithoutSharerNestedInput
    sharesReceived?: HandoverShareUpdateManyWithoutSharedWithUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    handovers?: HandoverDocumentUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: HandoverCommentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: HandoverVersionUncheckedUpdateManyWithoutCreatorNestedInput
    shares?: HandoverShareUncheckedUpdateManyWithoutSharerNestedInput
    sharesReceived?: HandoverShareUncheckedUpdateManyWithoutSharedWithUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HandoverDocumentCreateInput = {
    title: string
    status?: string
    priority?: string
    category?: string | null
    tags?: HandoverDocumentCreatetagsInput | string[]
    mongoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    archivedAt?: Date | string | null
    author: UserCreateNestedOneWithoutHandoversInput
    versions?: HandoverVersionCreateNestedManyWithoutDocumentInput
    shares?: HandoverShareCreateNestedManyWithoutDocumentInput
    comments?: HandoverCommentCreateNestedManyWithoutDocumentInput
  }

  export type HandoverDocumentUncheckedCreateInput = {
    id?: number
    title: string
    authorId: number
    status?: string
    priority?: string
    category?: string | null
    tags?: HandoverDocumentCreatetagsInput | string[]
    mongoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    archivedAt?: Date | string | null
    versions?: HandoverVersionUncheckedCreateNestedManyWithoutDocumentInput
    shares?: HandoverShareUncheckedCreateNestedManyWithoutDocumentInput
    comments?: HandoverCommentUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type HandoverDocumentUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    author?: UserUpdateOneRequiredWithoutHandoversNestedInput
    versions?: HandoverVersionUpdateManyWithoutDocumentNestedInput
    shares?: HandoverShareUpdateManyWithoutDocumentNestedInput
    comments?: HandoverCommentUpdateManyWithoutDocumentNestedInput
  }

  export type HandoverDocumentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    versions?: HandoverVersionUncheckedUpdateManyWithoutDocumentNestedInput
    shares?: HandoverShareUncheckedUpdateManyWithoutDocumentNestedInput
    comments?: HandoverCommentUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type HandoverDocumentCreateManyInput = {
    id?: number
    title: string
    authorId: number
    status?: string
    priority?: string
    category?: string | null
    tags?: HandoverDocumentCreatetagsInput | string[]
    mongoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    archivedAt?: Date | string | null
  }

  export type HandoverDocumentUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HandoverDocumentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HandoverVersionCreateInput = {
    versionNumber: number
    mongoId: string
    createdAt?: Date | string
    changeSummary?: string | null
    document: HandoverDocumentCreateNestedOneWithoutVersionsInput
    creator: UserCreateNestedOneWithoutVersionsInput
  }

  export type HandoverVersionUncheckedCreateInput = {
    id?: number
    documentId: number
    versionNumber: number
    mongoId: string
    createdAt?: Date | string
    createdBy: number
    changeSummary?: string | null
  }

  export type HandoverVersionUpdateInput = {
    versionNumber?: IntFieldUpdateOperationsInput | number
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changeSummary?: NullableStringFieldUpdateOperationsInput | string | null
    document?: HandoverDocumentUpdateOneRequiredWithoutVersionsNestedInput
    creator?: UserUpdateOneRequiredWithoutVersionsNestedInput
  }

  export type HandoverVersionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    versionNumber?: IntFieldUpdateOperationsInput | number
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    changeSummary?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HandoverVersionCreateManyInput = {
    id?: number
    documentId: number
    versionNumber: number
    mongoId: string
    createdAt?: Date | string
    createdBy: number
    changeSummary?: string | null
  }

  export type HandoverVersionUpdateManyMutationInput = {
    versionNumber?: IntFieldUpdateOperationsInput | number
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changeSummary?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HandoverVersionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    versionNumber?: IntFieldUpdateOperationsInput | number
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    changeSummary?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HandoverShareCreateInput = {
    permissionLevel?: string
    sharedAt?: Date | string
    expiresAt?: Date | string | null
    document: HandoverDocumentCreateNestedOneWithoutSharesInput
    sharedWithUser: UserCreateNestedOneWithoutSharesReceivedInput
    sharer: UserCreateNestedOneWithoutSharesInput
  }

  export type HandoverShareUncheckedCreateInput = {
    id?: number
    documentId: number
    sharedWithUserId: number
    permissionLevel?: string
    sharedAt?: Date | string
    sharedBy: number
    expiresAt?: Date | string | null
  }

  export type HandoverShareUpdateInput = {
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    document?: HandoverDocumentUpdateOneRequiredWithoutSharesNestedInput
    sharedWithUser?: UserUpdateOneRequiredWithoutSharesReceivedNestedInput
    sharer?: UserUpdateOneRequiredWithoutSharesNestedInput
  }

  export type HandoverShareUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    sharedWithUserId?: IntFieldUpdateOperationsInput | number
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sharedBy?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HandoverShareCreateManyInput = {
    id?: number
    documentId: number
    sharedWithUserId: number
    permissionLevel?: string
    sharedAt?: Date | string
    sharedBy: number
    expiresAt?: Date | string | null
  }

  export type HandoverShareUpdateManyMutationInput = {
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HandoverShareUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    sharedWithUserId?: IntFieldUpdateOperationsInput | number
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sharedBy?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HandoverCommentCreateInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    document: HandoverDocumentCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
    parentComment?: HandoverCommentCreateNestedOneWithoutRepliesInput
    replies?: HandoverCommentCreateNestedManyWithoutParentCommentInput
  }

  export type HandoverCommentUncheckedCreateInput = {
    id?: number
    documentId: number
    authorId: number
    content: string
    parentCommentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    replies?: HandoverCommentUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type HandoverCommentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    document?: HandoverDocumentUpdateOneRequiredWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    parentComment?: HandoverCommentUpdateOneWithoutRepliesNestedInput
    replies?: HandoverCommentUpdateManyWithoutParentCommentNestedInput
  }

  export type HandoverCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    replies?: HandoverCommentUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type HandoverCommentCreateManyInput = {
    id?: number
    documentId: number
    authorId: number
    content: string
    parentCommentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type HandoverCommentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HandoverCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type HandoverDocumentListRelationFilter = {
    every?: HandoverDocumentWhereInput
    some?: HandoverDocumentWhereInput
    none?: HandoverDocumentWhereInput
  }

  export type HandoverCommentListRelationFilter = {
    every?: HandoverCommentWhereInput
    some?: HandoverCommentWhereInput
    none?: HandoverCommentWhereInput
  }

  export type HandoverVersionListRelationFilter = {
    every?: HandoverVersionWhereInput
    some?: HandoverVersionWhereInput
    none?: HandoverVersionWhereInput
  }

  export type HandoverShareListRelationFilter = {
    every?: HandoverShareWhereInput
    some?: HandoverShareWhereInput
    none?: HandoverShareWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HandoverDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HandoverCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HandoverVersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HandoverShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    department?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    department?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    department?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HandoverDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    mongoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
    archivedAt?: SortOrder
  }

  export type HandoverDocumentAvgOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type HandoverDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    mongoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
    archivedAt?: SortOrder
  }

  export type HandoverDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    mongoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
    archivedAt?: SortOrder
  }

  export type HandoverDocumentSumOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type HandoverDocumentRelationFilter = {
    is?: HandoverDocumentWhereInput
    isNot?: HandoverDocumentWhereInput
  }

  export type HandoverVersionCountOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    versionNumber?: SortOrder
    mongoId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    changeSummary?: SortOrder
  }

  export type HandoverVersionAvgOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    versionNumber?: SortOrder
    createdBy?: SortOrder
  }

  export type HandoverVersionMaxOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    versionNumber?: SortOrder
    mongoId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    changeSummary?: SortOrder
  }

  export type HandoverVersionMinOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    versionNumber?: SortOrder
    mongoId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    changeSummary?: SortOrder
  }

  export type HandoverVersionSumOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    versionNumber?: SortOrder
    createdBy?: SortOrder
  }

  export type HandoverShareCountOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    sharedWithUserId?: SortOrder
    permissionLevel?: SortOrder
    sharedAt?: SortOrder
    sharedBy?: SortOrder
    expiresAt?: SortOrder
  }

  export type HandoverShareAvgOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    sharedWithUserId?: SortOrder
    sharedBy?: SortOrder
  }

  export type HandoverShareMaxOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    sharedWithUserId?: SortOrder
    permissionLevel?: SortOrder
    sharedAt?: SortOrder
    sharedBy?: SortOrder
    expiresAt?: SortOrder
  }

  export type HandoverShareMinOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    sharedWithUserId?: SortOrder
    permissionLevel?: SortOrder
    sharedAt?: SortOrder
    sharedBy?: SortOrder
    expiresAt?: SortOrder
  }

  export type HandoverShareSumOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    sharedWithUserId?: SortOrder
    sharedBy?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type HandoverCommentNullableRelationFilter = {
    is?: HandoverCommentWhereInput | null
    isNot?: HandoverCommentWhereInput | null
  }

  export type HandoverCommentCountOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    parentCommentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type HandoverCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    authorId?: SortOrder
    parentCommentId?: SortOrder
  }

  export type HandoverCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    parentCommentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type HandoverCommentMinOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    authorId?: SortOrder
    content?: SortOrder
    parentCommentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type HandoverCommentSumOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    authorId?: SortOrder
    parentCommentId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type HandoverDocumentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<HandoverDocumentCreateWithoutAuthorInput, HandoverDocumentUncheckedCreateWithoutAuthorInput> | HandoverDocumentCreateWithoutAuthorInput[] | HandoverDocumentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: HandoverDocumentCreateOrConnectWithoutAuthorInput | HandoverDocumentCreateOrConnectWithoutAuthorInput[]
    createMany?: HandoverDocumentCreateManyAuthorInputEnvelope
    connect?: HandoverDocumentWhereUniqueInput | HandoverDocumentWhereUniqueInput[]
  }

  export type HandoverCommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<HandoverCommentCreateWithoutAuthorInput, HandoverCommentUncheckedCreateWithoutAuthorInput> | HandoverCommentCreateWithoutAuthorInput[] | HandoverCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutAuthorInput | HandoverCommentCreateOrConnectWithoutAuthorInput[]
    createMany?: HandoverCommentCreateManyAuthorInputEnvelope
    connect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
  }

  export type HandoverVersionCreateNestedManyWithoutCreatorInput = {
    create?: XOR<HandoverVersionCreateWithoutCreatorInput, HandoverVersionUncheckedCreateWithoutCreatorInput> | HandoverVersionCreateWithoutCreatorInput[] | HandoverVersionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: HandoverVersionCreateOrConnectWithoutCreatorInput | HandoverVersionCreateOrConnectWithoutCreatorInput[]
    createMany?: HandoverVersionCreateManyCreatorInputEnvelope
    connect?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
  }

  export type HandoverShareCreateNestedManyWithoutSharerInput = {
    create?: XOR<HandoverShareCreateWithoutSharerInput, HandoverShareUncheckedCreateWithoutSharerInput> | HandoverShareCreateWithoutSharerInput[] | HandoverShareUncheckedCreateWithoutSharerInput[]
    connectOrCreate?: HandoverShareCreateOrConnectWithoutSharerInput | HandoverShareCreateOrConnectWithoutSharerInput[]
    createMany?: HandoverShareCreateManySharerInputEnvelope
    connect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
  }

  export type HandoverShareCreateNestedManyWithoutSharedWithUserInput = {
    create?: XOR<HandoverShareCreateWithoutSharedWithUserInput, HandoverShareUncheckedCreateWithoutSharedWithUserInput> | HandoverShareCreateWithoutSharedWithUserInput[] | HandoverShareUncheckedCreateWithoutSharedWithUserInput[]
    connectOrCreate?: HandoverShareCreateOrConnectWithoutSharedWithUserInput | HandoverShareCreateOrConnectWithoutSharedWithUserInput[]
    createMany?: HandoverShareCreateManySharedWithUserInputEnvelope
    connect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
  }

  export type HandoverDocumentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<HandoverDocumentCreateWithoutAuthorInput, HandoverDocumentUncheckedCreateWithoutAuthorInput> | HandoverDocumentCreateWithoutAuthorInput[] | HandoverDocumentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: HandoverDocumentCreateOrConnectWithoutAuthorInput | HandoverDocumentCreateOrConnectWithoutAuthorInput[]
    createMany?: HandoverDocumentCreateManyAuthorInputEnvelope
    connect?: HandoverDocumentWhereUniqueInput | HandoverDocumentWhereUniqueInput[]
  }

  export type HandoverCommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<HandoverCommentCreateWithoutAuthorInput, HandoverCommentUncheckedCreateWithoutAuthorInput> | HandoverCommentCreateWithoutAuthorInput[] | HandoverCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutAuthorInput | HandoverCommentCreateOrConnectWithoutAuthorInput[]
    createMany?: HandoverCommentCreateManyAuthorInputEnvelope
    connect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
  }

  export type HandoverVersionUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<HandoverVersionCreateWithoutCreatorInput, HandoverVersionUncheckedCreateWithoutCreatorInput> | HandoverVersionCreateWithoutCreatorInput[] | HandoverVersionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: HandoverVersionCreateOrConnectWithoutCreatorInput | HandoverVersionCreateOrConnectWithoutCreatorInput[]
    createMany?: HandoverVersionCreateManyCreatorInputEnvelope
    connect?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
  }

  export type HandoverShareUncheckedCreateNestedManyWithoutSharerInput = {
    create?: XOR<HandoverShareCreateWithoutSharerInput, HandoverShareUncheckedCreateWithoutSharerInput> | HandoverShareCreateWithoutSharerInput[] | HandoverShareUncheckedCreateWithoutSharerInput[]
    connectOrCreate?: HandoverShareCreateOrConnectWithoutSharerInput | HandoverShareCreateOrConnectWithoutSharerInput[]
    createMany?: HandoverShareCreateManySharerInputEnvelope
    connect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
  }

  export type HandoverShareUncheckedCreateNestedManyWithoutSharedWithUserInput = {
    create?: XOR<HandoverShareCreateWithoutSharedWithUserInput, HandoverShareUncheckedCreateWithoutSharedWithUserInput> | HandoverShareCreateWithoutSharedWithUserInput[] | HandoverShareUncheckedCreateWithoutSharedWithUserInput[]
    connectOrCreate?: HandoverShareCreateOrConnectWithoutSharedWithUserInput | HandoverShareCreateOrConnectWithoutSharedWithUserInput[]
    createMany?: HandoverShareCreateManySharedWithUserInputEnvelope
    connect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type HandoverDocumentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<HandoverDocumentCreateWithoutAuthorInput, HandoverDocumentUncheckedCreateWithoutAuthorInput> | HandoverDocumentCreateWithoutAuthorInput[] | HandoverDocumentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: HandoverDocumentCreateOrConnectWithoutAuthorInput | HandoverDocumentCreateOrConnectWithoutAuthorInput[]
    upsert?: HandoverDocumentUpsertWithWhereUniqueWithoutAuthorInput | HandoverDocumentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: HandoverDocumentCreateManyAuthorInputEnvelope
    set?: HandoverDocumentWhereUniqueInput | HandoverDocumentWhereUniqueInput[]
    disconnect?: HandoverDocumentWhereUniqueInput | HandoverDocumentWhereUniqueInput[]
    delete?: HandoverDocumentWhereUniqueInput | HandoverDocumentWhereUniqueInput[]
    connect?: HandoverDocumentWhereUniqueInput | HandoverDocumentWhereUniqueInput[]
    update?: HandoverDocumentUpdateWithWhereUniqueWithoutAuthorInput | HandoverDocumentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: HandoverDocumentUpdateManyWithWhereWithoutAuthorInput | HandoverDocumentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: HandoverDocumentScalarWhereInput | HandoverDocumentScalarWhereInput[]
  }

  export type HandoverCommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<HandoverCommentCreateWithoutAuthorInput, HandoverCommentUncheckedCreateWithoutAuthorInput> | HandoverCommentCreateWithoutAuthorInput[] | HandoverCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutAuthorInput | HandoverCommentCreateOrConnectWithoutAuthorInput[]
    upsert?: HandoverCommentUpsertWithWhereUniqueWithoutAuthorInput | HandoverCommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: HandoverCommentCreateManyAuthorInputEnvelope
    set?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    disconnect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    delete?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    connect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    update?: HandoverCommentUpdateWithWhereUniqueWithoutAuthorInput | HandoverCommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: HandoverCommentUpdateManyWithWhereWithoutAuthorInput | HandoverCommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: HandoverCommentScalarWhereInput | HandoverCommentScalarWhereInput[]
  }

  export type HandoverVersionUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<HandoverVersionCreateWithoutCreatorInput, HandoverVersionUncheckedCreateWithoutCreatorInput> | HandoverVersionCreateWithoutCreatorInput[] | HandoverVersionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: HandoverVersionCreateOrConnectWithoutCreatorInput | HandoverVersionCreateOrConnectWithoutCreatorInput[]
    upsert?: HandoverVersionUpsertWithWhereUniqueWithoutCreatorInput | HandoverVersionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: HandoverVersionCreateManyCreatorInputEnvelope
    set?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    disconnect?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    delete?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    connect?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    update?: HandoverVersionUpdateWithWhereUniqueWithoutCreatorInput | HandoverVersionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: HandoverVersionUpdateManyWithWhereWithoutCreatorInput | HandoverVersionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: HandoverVersionScalarWhereInput | HandoverVersionScalarWhereInput[]
  }

  export type HandoverShareUpdateManyWithoutSharerNestedInput = {
    create?: XOR<HandoverShareCreateWithoutSharerInput, HandoverShareUncheckedCreateWithoutSharerInput> | HandoverShareCreateWithoutSharerInput[] | HandoverShareUncheckedCreateWithoutSharerInput[]
    connectOrCreate?: HandoverShareCreateOrConnectWithoutSharerInput | HandoverShareCreateOrConnectWithoutSharerInput[]
    upsert?: HandoverShareUpsertWithWhereUniqueWithoutSharerInput | HandoverShareUpsertWithWhereUniqueWithoutSharerInput[]
    createMany?: HandoverShareCreateManySharerInputEnvelope
    set?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    disconnect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    delete?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    connect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    update?: HandoverShareUpdateWithWhereUniqueWithoutSharerInput | HandoverShareUpdateWithWhereUniqueWithoutSharerInput[]
    updateMany?: HandoverShareUpdateManyWithWhereWithoutSharerInput | HandoverShareUpdateManyWithWhereWithoutSharerInput[]
    deleteMany?: HandoverShareScalarWhereInput | HandoverShareScalarWhereInput[]
  }

  export type HandoverShareUpdateManyWithoutSharedWithUserNestedInput = {
    create?: XOR<HandoverShareCreateWithoutSharedWithUserInput, HandoverShareUncheckedCreateWithoutSharedWithUserInput> | HandoverShareCreateWithoutSharedWithUserInput[] | HandoverShareUncheckedCreateWithoutSharedWithUserInput[]
    connectOrCreate?: HandoverShareCreateOrConnectWithoutSharedWithUserInput | HandoverShareCreateOrConnectWithoutSharedWithUserInput[]
    upsert?: HandoverShareUpsertWithWhereUniqueWithoutSharedWithUserInput | HandoverShareUpsertWithWhereUniqueWithoutSharedWithUserInput[]
    createMany?: HandoverShareCreateManySharedWithUserInputEnvelope
    set?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    disconnect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    delete?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    connect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    update?: HandoverShareUpdateWithWhereUniqueWithoutSharedWithUserInput | HandoverShareUpdateWithWhereUniqueWithoutSharedWithUserInput[]
    updateMany?: HandoverShareUpdateManyWithWhereWithoutSharedWithUserInput | HandoverShareUpdateManyWithWhereWithoutSharedWithUserInput[]
    deleteMany?: HandoverShareScalarWhereInput | HandoverShareScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HandoverDocumentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<HandoverDocumentCreateWithoutAuthorInput, HandoverDocumentUncheckedCreateWithoutAuthorInput> | HandoverDocumentCreateWithoutAuthorInput[] | HandoverDocumentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: HandoverDocumentCreateOrConnectWithoutAuthorInput | HandoverDocumentCreateOrConnectWithoutAuthorInput[]
    upsert?: HandoverDocumentUpsertWithWhereUniqueWithoutAuthorInput | HandoverDocumentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: HandoverDocumentCreateManyAuthorInputEnvelope
    set?: HandoverDocumentWhereUniqueInput | HandoverDocumentWhereUniqueInput[]
    disconnect?: HandoverDocumentWhereUniqueInput | HandoverDocumentWhereUniqueInput[]
    delete?: HandoverDocumentWhereUniqueInput | HandoverDocumentWhereUniqueInput[]
    connect?: HandoverDocumentWhereUniqueInput | HandoverDocumentWhereUniqueInput[]
    update?: HandoverDocumentUpdateWithWhereUniqueWithoutAuthorInput | HandoverDocumentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: HandoverDocumentUpdateManyWithWhereWithoutAuthorInput | HandoverDocumentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: HandoverDocumentScalarWhereInput | HandoverDocumentScalarWhereInput[]
  }

  export type HandoverCommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<HandoverCommentCreateWithoutAuthorInput, HandoverCommentUncheckedCreateWithoutAuthorInput> | HandoverCommentCreateWithoutAuthorInput[] | HandoverCommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutAuthorInput | HandoverCommentCreateOrConnectWithoutAuthorInput[]
    upsert?: HandoverCommentUpsertWithWhereUniqueWithoutAuthorInput | HandoverCommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: HandoverCommentCreateManyAuthorInputEnvelope
    set?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    disconnect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    delete?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    connect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    update?: HandoverCommentUpdateWithWhereUniqueWithoutAuthorInput | HandoverCommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: HandoverCommentUpdateManyWithWhereWithoutAuthorInput | HandoverCommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: HandoverCommentScalarWhereInput | HandoverCommentScalarWhereInput[]
  }

  export type HandoverVersionUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<HandoverVersionCreateWithoutCreatorInput, HandoverVersionUncheckedCreateWithoutCreatorInput> | HandoverVersionCreateWithoutCreatorInput[] | HandoverVersionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: HandoverVersionCreateOrConnectWithoutCreatorInput | HandoverVersionCreateOrConnectWithoutCreatorInput[]
    upsert?: HandoverVersionUpsertWithWhereUniqueWithoutCreatorInput | HandoverVersionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: HandoverVersionCreateManyCreatorInputEnvelope
    set?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    disconnect?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    delete?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    connect?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    update?: HandoverVersionUpdateWithWhereUniqueWithoutCreatorInput | HandoverVersionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: HandoverVersionUpdateManyWithWhereWithoutCreatorInput | HandoverVersionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: HandoverVersionScalarWhereInput | HandoverVersionScalarWhereInput[]
  }

  export type HandoverShareUncheckedUpdateManyWithoutSharerNestedInput = {
    create?: XOR<HandoverShareCreateWithoutSharerInput, HandoverShareUncheckedCreateWithoutSharerInput> | HandoverShareCreateWithoutSharerInput[] | HandoverShareUncheckedCreateWithoutSharerInput[]
    connectOrCreate?: HandoverShareCreateOrConnectWithoutSharerInput | HandoverShareCreateOrConnectWithoutSharerInput[]
    upsert?: HandoverShareUpsertWithWhereUniqueWithoutSharerInput | HandoverShareUpsertWithWhereUniqueWithoutSharerInput[]
    createMany?: HandoverShareCreateManySharerInputEnvelope
    set?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    disconnect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    delete?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    connect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    update?: HandoverShareUpdateWithWhereUniqueWithoutSharerInput | HandoverShareUpdateWithWhereUniqueWithoutSharerInput[]
    updateMany?: HandoverShareUpdateManyWithWhereWithoutSharerInput | HandoverShareUpdateManyWithWhereWithoutSharerInput[]
    deleteMany?: HandoverShareScalarWhereInput | HandoverShareScalarWhereInput[]
  }

  export type HandoverShareUncheckedUpdateManyWithoutSharedWithUserNestedInput = {
    create?: XOR<HandoverShareCreateWithoutSharedWithUserInput, HandoverShareUncheckedCreateWithoutSharedWithUserInput> | HandoverShareCreateWithoutSharedWithUserInput[] | HandoverShareUncheckedCreateWithoutSharedWithUserInput[]
    connectOrCreate?: HandoverShareCreateOrConnectWithoutSharedWithUserInput | HandoverShareCreateOrConnectWithoutSharedWithUserInput[]
    upsert?: HandoverShareUpsertWithWhereUniqueWithoutSharedWithUserInput | HandoverShareUpsertWithWhereUniqueWithoutSharedWithUserInput[]
    createMany?: HandoverShareCreateManySharedWithUserInputEnvelope
    set?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    disconnect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    delete?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    connect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    update?: HandoverShareUpdateWithWhereUniqueWithoutSharedWithUserInput | HandoverShareUpdateWithWhereUniqueWithoutSharedWithUserInput[]
    updateMany?: HandoverShareUpdateManyWithWhereWithoutSharedWithUserInput | HandoverShareUpdateManyWithWhereWithoutSharedWithUserInput[]
    deleteMany?: HandoverShareScalarWhereInput | HandoverShareScalarWhereInput[]
  }

  export type HandoverDocumentCreatetagsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutHandoversInput = {
    create?: XOR<UserCreateWithoutHandoversInput, UserUncheckedCreateWithoutHandoversInput>
    connectOrCreate?: UserCreateOrConnectWithoutHandoversInput
    connect?: UserWhereUniqueInput
  }

  export type HandoverVersionCreateNestedManyWithoutDocumentInput = {
    create?: XOR<HandoverVersionCreateWithoutDocumentInput, HandoverVersionUncheckedCreateWithoutDocumentInput> | HandoverVersionCreateWithoutDocumentInput[] | HandoverVersionUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: HandoverVersionCreateOrConnectWithoutDocumentInput | HandoverVersionCreateOrConnectWithoutDocumentInput[]
    createMany?: HandoverVersionCreateManyDocumentInputEnvelope
    connect?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
  }

  export type HandoverShareCreateNestedManyWithoutDocumentInput = {
    create?: XOR<HandoverShareCreateWithoutDocumentInput, HandoverShareUncheckedCreateWithoutDocumentInput> | HandoverShareCreateWithoutDocumentInput[] | HandoverShareUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: HandoverShareCreateOrConnectWithoutDocumentInput | HandoverShareCreateOrConnectWithoutDocumentInput[]
    createMany?: HandoverShareCreateManyDocumentInputEnvelope
    connect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
  }

  export type HandoverCommentCreateNestedManyWithoutDocumentInput = {
    create?: XOR<HandoverCommentCreateWithoutDocumentInput, HandoverCommentUncheckedCreateWithoutDocumentInput> | HandoverCommentCreateWithoutDocumentInput[] | HandoverCommentUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutDocumentInput | HandoverCommentCreateOrConnectWithoutDocumentInput[]
    createMany?: HandoverCommentCreateManyDocumentInputEnvelope
    connect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
  }

  export type HandoverVersionUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<HandoverVersionCreateWithoutDocumentInput, HandoverVersionUncheckedCreateWithoutDocumentInput> | HandoverVersionCreateWithoutDocumentInput[] | HandoverVersionUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: HandoverVersionCreateOrConnectWithoutDocumentInput | HandoverVersionCreateOrConnectWithoutDocumentInput[]
    createMany?: HandoverVersionCreateManyDocumentInputEnvelope
    connect?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
  }

  export type HandoverShareUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<HandoverShareCreateWithoutDocumentInput, HandoverShareUncheckedCreateWithoutDocumentInput> | HandoverShareCreateWithoutDocumentInput[] | HandoverShareUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: HandoverShareCreateOrConnectWithoutDocumentInput | HandoverShareCreateOrConnectWithoutDocumentInput[]
    createMany?: HandoverShareCreateManyDocumentInputEnvelope
    connect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
  }

  export type HandoverCommentUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<HandoverCommentCreateWithoutDocumentInput, HandoverCommentUncheckedCreateWithoutDocumentInput> | HandoverCommentCreateWithoutDocumentInput[] | HandoverCommentUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutDocumentInput | HandoverCommentCreateOrConnectWithoutDocumentInput[]
    createMany?: HandoverCommentCreateManyDocumentInputEnvelope
    connect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
  }

  export type HandoverDocumentUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutHandoversNestedInput = {
    create?: XOR<UserCreateWithoutHandoversInput, UserUncheckedCreateWithoutHandoversInput>
    connectOrCreate?: UserCreateOrConnectWithoutHandoversInput
    upsert?: UserUpsertWithoutHandoversInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHandoversInput, UserUpdateWithoutHandoversInput>, UserUncheckedUpdateWithoutHandoversInput>
  }

  export type HandoverVersionUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<HandoverVersionCreateWithoutDocumentInput, HandoverVersionUncheckedCreateWithoutDocumentInput> | HandoverVersionCreateWithoutDocumentInput[] | HandoverVersionUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: HandoverVersionCreateOrConnectWithoutDocumentInput | HandoverVersionCreateOrConnectWithoutDocumentInput[]
    upsert?: HandoverVersionUpsertWithWhereUniqueWithoutDocumentInput | HandoverVersionUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: HandoverVersionCreateManyDocumentInputEnvelope
    set?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    disconnect?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    delete?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    connect?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    update?: HandoverVersionUpdateWithWhereUniqueWithoutDocumentInput | HandoverVersionUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: HandoverVersionUpdateManyWithWhereWithoutDocumentInput | HandoverVersionUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: HandoverVersionScalarWhereInput | HandoverVersionScalarWhereInput[]
  }

  export type HandoverShareUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<HandoverShareCreateWithoutDocumentInput, HandoverShareUncheckedCreateWithoutDocumentInput> | HandoverShareCreateWithoutDocumentInput[] | HandoverShareUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: HandoverShareCreateOrConnectWithoutDocumentInput | HandoverShareCreateOrConnectWithoutDocumentInput[]
    upsert?: HandoverShareUpsertWithWhereUniqueWithoutDocumentInput | HandoverShareUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: HandoverShareCreateManyDocumentInputEnvelope
    set?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    disconnect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    delete?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    connect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    update?: HandoverShareUpdateWithWhereUniqueWithoutDocumentInput | HandoverShareUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: HandoverShareUpdateManyWithWhereWithoutDocumentInput | HandoverShareUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: HandoverShareScalarWhereInput | HandoverShareScalarWhereInput[]
  }

  export type HandoverCommentUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<HandoverCommentCreateWithoutDocumentInput, HandoverCommentUncheckedCreateWithoutDocumentInput> | HandoverCommentCreateWithoutDocumentInput[] | HandoverCommentUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutDocumentInput | HandoverCommentCreateOrConnectWithoutDocumentInput[]
    upsert?: HandoverCommentUpsertWithWhereUniqueWithoutDocumentInput | HandoverCommentUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: HandoverCommentCreateManyDocumentInputEnvelope
    set?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    disconnect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    delete?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    connect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    update?: HandoverCommentUpdateWithWhereUniqueWithoutDocumentInput | HandoverCommentUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: HandoverCommentUpdateManyWithWhereWithoutDocumentInput | HandoverCommentUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: HandoverCommentScalarWhereInput | HandoverCommentScalarWhereInput[]
  }

  export type HandoverVersionUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<HandoverVersionCreateWithoutDocumentInput, HandoverVersionUncheckedCreateWithoutDocumentInput> | HandoverVersionCreateWithoutDocumentInput[] | HandoverVersionUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: HandoverVersionCreateOrConnectWithoutDocumentInput | HandoverVersionCreateOrConnectWithoutDocumentInput[]
    upsert?: HandoverVersionUpsertWithWhereUniqueWithoutDocumentInput | HandoverVersionUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: HandoverVersionCreateManyDocumentInputEnvelope
    set?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    disconnect?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    delete?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    connect?: HandoverVersionWhereUniqueInput | HandoverVersionWhereUniqueInput[]
    update?: HandoverVersionUpdateWithWhereUniqueWithoutDocumentInput | HandoverVersionUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: HandoverVersionUpdateManyWithWhereWithoutDocumentInput | HandoverVersionUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: HandoverVersionScalarWhereInput | HandoverVersionScalarWhereInput[]
  }

  export type HandoverShareUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<HandoverShareCreateWithoutDocumentInput, HandoverShareUncheckedCreateWithoutDocumentInput> | HandoverShareCreateWithoutDocumentInput[] | HandoverShareUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: HandoverShareCreateOrConnectWithoutDocumentInput | HandoverShareCreateOrConnectWithoutDocumentInput[]
    upsert?: HandoverShareUpsertWithWhereUniqueWithoutDocumentInput | HandoverShareUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: HandoverShareCreateManyDocumentInputEnvelope
    set?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    disconnect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    delete?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    connect?: HandoverShareWhereUniqueInput | HandoverShareWhereUniqueInput[]
    update?: HandoverShareUpdateWithWhereUniqueWithoutDocumentInput | HandoverShareUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: HandoverShareUpdateManyWithWhereWithoutDocumentInput | HandoverShareUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: HandoverShareScalarWhereInput | HandoverShareScalarWhereInput[]
  }

  export type HandoverCommentUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<HandoverCommentCreateWithoutDocumentInput, HandoverCommentUncheckedCreateWithoutDocumentInput> | HandoverCommentCreateWithoutDocumentInput[] | HandoverCommentUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutDocumentInput | HandoverCommentCreateOrConnectWithoutDocumentInput[]
    upsert?: HandoverCommentUpsertWithWhereUniqueWithoutDocumentInput | HandoverCommentUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: HandoverCommentCreateManyDocumentInputEnvelope
    set?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    disconnect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    delete?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    connect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    update?: HandoverCommentUpdateWithWhereUniqueWithoutDocumentInput | HandoverCommentUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: HandoverCommentUpdateManyWithWhereWithoutDocumentInput | HandoverCommentUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: HandoverCommentScalarWhereInput | HandoverCommentScalarWhereInput[]
  }

  export type HandoverDocumentCreateNestedOneWithoutVersionsInput = {
    create?: XOR<HandoverDocumentCreateWithoutVersionsInput, HandoverDocumentUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: HandoverDocumentCreateOrConnectWithoutVersionsInput
    connect?: HandoverDocumentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutVersionsInput = {
    create?: XOR<UserCreateWithoutVersionsInput, UserUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVersionsInput
    connect?: UserWhereUniqueInput
  }

  export type HandoverDocumentUpdateOneRequiredWithoutVersionsNestedInput = {
    create?: XOR<HandoverDocumentCreateWithoutVersionsInput, HandoverDocumentUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: HandoverDocumentCreateOrConnectWithoutVersionsInput
    upsert?: HandoverDocumentUpsertWithoutVersionsInput
    connect?: HandoverDocumentWhereUniqueInput
    update?: XOR<XOR<HandoverDocumentUpdateToOneWithWhereWithoutVersionsInput, HandoverDocumentUpdateWithoutVersionsInput>, HandoverDocumentUncheckedUpdateWithoutVersionsInput>
  }

  export type UserUpdateOneRequiredWithoutVersionsNestedInput = {
    create?: XOR<UserCreateWithoutVersionsInput, UserUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVersionsInput
    upsert?: UserUpsertWithoutVersionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVersionsInput, UserUpdateWithoutVersionsInput>, UserUncheckedUpdateWithoutVersionsInput>
  }

  export type HandoverDocumentCreateNestedOneWithoutSharesInput = {
    create?: XOR<HandoverDocumentCreateWithoutSharesInput, HandoverDocumentUncheckedCreateWithoutSharesInput>
    connectOrCreate?: HandoverDocumentCreateOrConnectWithoutSharesInput
    connect?: HandoverDocumentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSharesReceivedInput = {
    create?: XOR<UserCreateWithoutSharesReceivedInput, UserUncheckedCreateWithoutSharesReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSharesReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSharesInput = {
    create?: XOR<UserCreateWithoutSharesInput, UserUncheckedCreateWithoutSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSharesInput
    connect?: UserWhereUniqueInput
  }

  export type HandoverDocumentUpdateOneRequiredWithoutSharesNestedInput = {
    create?: XOR<HandoverDocumentCreateWithoutSharesInput, HandoverDocumentUncheckedCreateWithoutSharesInput>
    connectOrCreate?: HandoverDocumentCreateOrConnectWithoutSharesInput
    upsert?: HandoverDocumentUpsertWithoutSharesInput
    connect?: HandoverDocumentWhereUniqueInput
    update?: XOR<XOR<HandoverDocumentUpdateToOneWithWhereWithoutSharesInput, HandoverDocumentUpdateWithoutSharesInput>, HandoverDocumentUncheckedUpdateWithoutSharesInput>
  }

  export type UserUpdateOneRequiredWithoutSharesReceivedNestedInput = {
    create?: XOR<UserCreateWithoutSharesReceivedInput, UserUncheckedCreateWithoutSharesReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutSharesReceivedInput
    upsert?: UserUpsertWithoutSharesReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSharesReceivedInput, UserUpdateWithoutSharesReceivedInput>, UserUncheckedUpdateWithoutSharesReceivedInput>
  }

  export type UserUpdateOneRequiredWithoutSharesNestedInput = {
    create?: XOR<UserCreateWithoutSharesInput, UserUncheckedCreateWithoutSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSharesInput
    upsert?: UserUpsertWithoutSharesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSharesInput, UserUpdateWithoutSharesInput>, UserUncheckedUpdateWithoutSharesInput>
  }

  export type HandoverDocumentCreateNestedOneWithoutCommentsInput = {
    create?: XOR<HandoverDocumentCreateWithoutCommentsInput, HandoverDocumentUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: HandoverDocumentCreateOrConnectWithoutCommentsInput
    connect?: HandoverDocumentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type HandoverCommentCreateNestedOneWithoutRepliesInput = {
    create?: XOR<HandoverCommentCreateWithoutRepliesInput, HandoverCommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutRepliesInput
    connect?: HandoverCommentWhereUniqueInput
  }

  export type HandoverCommentCreateNestedManyWithoutParentCommentInput = {
    create?: XOR<HandoverCommentCreateWithoutParentCommentInput, HandoverCommentUncheckedCreateWithoutParentCommentInput> | HandoverCommentCreateWithoutParentCommentInput[] | HandoverCommentUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutParentCommentInput | HandoverCommentCreateOrConnectWithoutParentCommentInput[]
    createMany?: HandoverCommentCreateManyParentCommentInputEnvelope
    connect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
  }

  export type HandoverCommentUncheckedCreateNestedManyWithoutParentCommentInput = {
    create?: XOR<HandoverCommentCreateWithoutParentCommentInput, HandoverCommentUncheckedCreateWithoutParentCommentInput> | HandoverCommentCreateWithoutParentCommentInput[] | HandoverCommentUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutParentCommentInput | HandoverCommentCreateOrConnectWithoutParentCommentInput[]
    createMany?: HandoverCommentCreateManyParentCommentInputEnvelope
    connect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
  }

  export type HandoverDocumentUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<HandoverDocumentCreateWithoutCommentsInput, HandoverDocumentUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: HandoverDocumentCreateOrConnectWithoutCommentsInput
    upsert?: HandoverDocumentUpsertWithoutCommentsInput
    connect?: HandoverDocumentWhereUniqueInput
    update?: XOR<XOR<HandoverDocumentUpdateToOneWithWhereWithoutCommentsInput, HandoverDocumentUpdateWithoutCommentsInput>, HandoverDocumentUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type HandoverCommentUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<HandoverCommentCreateWithoutRepliesInput, HandoverCommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutRepliesInput
    upsert?: HandoverCommentUpsertWithoutRepliesInput
    disconnect?: HandoverCommentWhereInput | boolean
    delete?: HandoverCommentWhereInput | boolean
    connect?: HandoverCommentWhereUniqueInput
    update?: XOR<XOR<HandoverCommentUpdateToOneWithWhereWithoutRepliesInput, HandoverCommentUpdateWithoutRepliesInput>, HandoverCommentUncheckedUpdateWithoutRepliesInput>
  }

  export type HandoverCommentUpdateManyWithoutParentCommentNestedInput = {
    create?: XOR<HandoverCommentCreateWithoutParentCommentInput, HandoverCommentUncheckedCreateWithoutParentCommentInput> | HandoverCommentCreateWithoutParentCommentInput[] | HandoverCommentUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutParentCommentInput | HandoverCommentCreateOrConnectWithoutParentCommentInput[]
    upsert?: HandoverCommentUpsertWithWhereUniqueWithoutParentCommentInput | HandoverCommentUpsertWithWhereUniqueWithoutParentCommentInput[]
    createMany?: HandoverCommentCreateManyParentCommentInputEnvelope
    set?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    disconnect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    delete?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    connect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    update?: HandoverCommentUpdateWithWhereUniqueWithoutParentCommentInput | HandoverCommentUpdateWithWhereUniqueWithoutParentCommentInput[]
    updateMany?: HandoverCommentUpdateManyWithWhereWithoutParentCommentInput | HandoverCommentUpdateManyWithWhereWithoutParentCommentInput[]
    deleteMany?: HandoverCommentScalarWhereInput | HandoverCommentScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HandoverCommentUncheckedUpdateManyWithoutParentCommentNestedInput = {
    create?: XOR<HandoverCommentCreateWithoutParentCommentInput, HandoverCommentUncheckedCreateWithoutParentCommentInput> | HandoverCommentCreateWithoutParentCommentInput[] | HandoverCommentUncheckedCreateWithoutParentCommentInput[]
    connectOrCreate?: HandoverCommentCreateOrConnectWithoutParentCommentInput | HandoverCommentCreateOrConnectWithoutParentCommentInput[]
    upsert?: HandoverCommentUpsertWithWhereUniqueWithoutParentCommentInput | HandoverCommentUpsertWithWhereUniqueWithoutParentCommentInput[]
    createMany?: HandoverCommentCreateManyParentCommentInputEnvelope
    set?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    disconnect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    delete?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    connect?: HandoverCommentWhereUniqueInput | HandoverCommentWhereUniqueInput[]
    update?: HandoverCommentUpdateWithWhereUniqueWithoutParentCommentInput | HandoverCommentUpdateWithWhereUniqueWithoutParentCommentInput[]
    updateMany?: HandoverCommentUpdateManyWithWhereWithoutParentCommentInput | HandoverCommentUpdateManyWithWhereWithoutParentCommentInput[]
    deleteMany?: HandoverCommentScalarWhereInput | HandoverCommentScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type HandoverDocumentCreateWithoutAuthorInput = {
    title: string
    status?: string
    priority?: string
    category?: string | null
    tags?: HandoverDocumentCreatetagsInput | string[]
    mongoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    archivedAt?: Date | string | null
    versions?: HandoverVersionCreateNestedManyWithoutDocumentInput
    shares?: HandoverShareCreateNestedManyWithoutDocumentInput
    comments?: HandoverCommentCreateNestedManyWithoutDocumentInput
  }

  export type HandoverDocumentUncheckedCreateWithoutAuthorInput = {
    id?: number
    title: string
    status?: string
    priority?: string
    category?: string | null
    tags?: HandoverDocumentCreatetagsInput | string[]
    mongoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    archivedAt?: Date | string | null
    versions?: HandoverVersionUncheckedCreateNestedManyWithoutDocumentInput
    shares?: HandoverShareUncheckedCreateNestedManyWithoutDocumentInput
    comments?: HandoverCommentUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type HandoverDocumentCreateOrConnectWithoutAuthorInput = {
    where: HandoverDocumentWhereUniqueInput
    create: XOR<HandoverDocumentCreateWithoutAuthorInput, HandoverDocumentUncheckedCreateWithoutAuthorInput>
  }

  export type HandoverDocumentCreateManyAuthorInputEnvelope = {
    data: HandoverDocumentCreateManyAuthorInput | HandoverDocumentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type HandoverCommentCreateWithoutAuthorInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    document: HandoverDocumentCreateNestedOneWithoutCommentsInput
    parentComment?: HandoverCommentCreateNestedOneWithoutRepliesInput
    replies?: HandoverCommentCreateNestedManyWithoutParentCommentInput
  }

  export type HandoverCommentUncheckedCreateWithoutAuthorInput = {
    id?: number
    documentId: number
    content: string
    parentCommentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    replies?: HandoverCommentUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type HandoverCommentCreateOrConnectWithoutAuthorInput = {
    where: HandoverCommentWhereUniqueInput
    create: XOR<HandoverCommentCreateWithoutAuthorInput, HandoverCommentUncheckedCreateWithoutAuthorInput>
  }

  export type HandoverCommentCreateManyAuthorInputEnvelope = {
    data: HandoverCommentCreateManyAuthorInput | HandoverCommentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type HandoverVersionCreateWithoutCreatorInput = {
    versionNumber: number
    mongoId: string
    createdAt?: Date | string
    changeSummary?: string | null
    document: HandoverDocumentCreateNestedOneWithoutVersionsInput
  }

  export type HandoverVersionUncheckedCreateWithoutCreatorInput = {
    id?: number
    documentId: number
    versionNumber: number
    mongoId: string
    createdAt?: Date | string
    changeSummary?: string | null
  }

  export type HandoverVersionCreateOrConnectWithoutCreatorInput = {
    where: HandoverVersionWhereUniqueInput
    create: XOR<HandoverVersionCreateWithoutCreatorInput, HandoverVersionUncheckedCreateWithoutCreatorInput>
  }

  export type HandoverVersionCreateManyCreatorInputEnvelope = {
    data: HandoverVersionCreateManyCreatorInput | HandoverVersionCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type HandoverShareCreateWithoutSharerInput = {
    permissionLevel?: string
    sharedAt?: Date | string
    expiresAt?: Date | string | null
    document: HandoverDocumentCreateNestedOneWithoutSharesInput
    sharedWithUser: UserCreateNestedOneWithoutSharesReceivedInput
  }

  export type HandoverShareUncheckedCreateWithoutSharerInput = {
    id?: number
    documentId: number
    sharedWithUserId: number
    permissionLevel?: string
    sharedAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type HandoverShareCreateOrConnectWithoutSharerInput = {
    where: HandoverShareWhereUniqueInput
    create: XOR<HandoverShareCreateWithoutSharerInput, HandoverShareUncheckedCreateWithoutSharerInput>
  }

  export type HandoverShareCreateManySharerInputEnvelope = {
    data: HandoverShareCreateManySharerInput | HandoverShareCreateManySharerInput[]
    skipDuplicates?: boolean
  }

  export type HandoverShareCreateWithoutSharedWithUserInput = {
    permissionLevel?: string
    sharedAt?: Date | string
    expiresAt?: Date | string | null
    document: HandoverDocumentCreateNestedOneWithoutSharesInput
    sharer: UserCreateNestedOneWithoutSharesInput
  }

  export type HandoverShareUncheckedCreateWithoutSharedWithUserInput = {
    id?: number
    documentId: number
    permissionLevel?: string
    sharedAt?: Date | string
    sharedBy: number
    expiresAt?: Date | string | null
  }

  export type HandoverShareCreateOrConnectWithoutSharedWithUserInput = {
    where: HandoverShareWhereUniqueInput
    create: XOR<HandoverShareCreateWithoutSharedWithUserInput, HandoverShareUncheckedCreateWithoutSharedWithUserInput>
  }

  export type HandoverShareCreateManySharedWithUserInputEnvelope = {
    data: HandoverShareCreateManySharedWithUserInput | HandoverShareCreateManySharedWithUserInput[]
    skipDuplicates?: boolean
  }

  export type HandoverDocumentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: HandoverDocumentWhereUniqueInput
    update: XOR<HandoverDocumentUpdateWithoutAuthorInput, HandoverDocumentUncheckedUpdateWithoutAuthorInput>
    create: XOR<HandoverDocumentCreateWithoutAuthorInput, HandoverDocumentUncheckedCreateWithoutAuthorInput>
  }

  export type HandoverDocumentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: HandoverDocumentWhereUniqueInput
    data: XOR<HandoverDocumentUpdateWithoutAuthorInput, HandoverDocumentUncheckedUpdateWithoutAuthorInput>
  }

  export type HandoverDocumentUpdateManyWithWhereWithoutAuthorInput = {
    where: HandoverDocumentScalarWhereInput
    data: XOR<HandoverDocumentUpdateManyMutationInput, HandoverDocumentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type HandoverDocumentScalarWhereInput = {
    AND?: HandoverDocumentScalarWhereInput | HandoverDocumentScalarWhereInput[]
    OR?: HandoverDocumentScalarWhereInput[]
    NOT?: HandoverDocumentScalarWhereInput | HandoverDocumentScalarWhereInput[]
    id?: IntFilter<"HandoverDocument"> | number
    title?: StringFilter<"HandoverDocument"> | string
    authorId?: IntFilter<"HandoverDocument"> | number
    status?: StringFilter<"HandoverDocument"> | string
    priority?: StringFilter<"HandoverDocument"> | string
    category?: StringNullableFilter<"HandoverDocument"> | string | null
    tags?: StringNullableListFilter<"HandoverDocument">
    mongoId?: StringFilter<"HandoverDocument"> | string
    createdAt?: DateTimeFilter<"HandoverDocument"> | Date | string
    updatedAt?: DateTimeFilter<"HandoverDocument"> | Date | string
    completedAt?: DateTimeNullableFilter<"HandoverDocument"> | Date | string | null
    archivedAt?: DateTimeNullableFilter<"HandoverDocument"> | Date | string | null
  }

  export type HandoverCommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: HandoverCommentWhereUniqueInput
    update: XOR<HandoverCommentUpdateWithoutAuthorInput, HandoverCommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<HandoverCommentCreateWithoutAuthorInput, HandoverCommentUncheckedCreateWithoutAuthorInput>
  }

  export type HandoverCommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: HandoverCommentWhereUniqueInput
    data: XOR<HandoverCommentUpdateWithoutAuthorInput, HandoverCommentUncheckedUpdateWithoutAuthorInput>
  }

  export type HandoverCommentUpdateManyWithWhereWithoutAuthorInput = {
    where: HandoverCommentScalarWhereInput
    data: XOR<HandoverCommentUpdateManyMutationInput, HandoverCommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type HandoverCommentScalarWhereInput = {
    AND?: HandoverCommentScalarWhereInput | HandoverCommentScalarWhereInput[]
    OR?: HandoverCommentScalarWhereInput[]
    NOT?: HandoverCommentScalarWhereInput | HandoverCommentScalarWhereInput[]
    id?: IntFilter<"HandoverComment"> | number
    documentId?: IntFilter<"HandoverComment"> | number
    authorId?: IntFilter<"HandoverComment"> | number
    content?: StringFilter<"HandoverComment"> | string
    parentCommentId?: IntNullableFilter<"HandoverComment"> | number | null
    createdAt?: DateTimeFilter<"HandoverComment"> | Date | string
    updatedAt?: DateTimeFilter<"HandoverComment"> | Date | string
    isDeleted?: BoolFilter<"HandoverComment"> | boolean
  }

  export type HandoverVersionUpsertWithWhereUniqueWithoutCreatorInput = {
    where: HandoverVersionWhereUniqueInput
    update: XOR<HandoverVersionUpdateWithoutCreatorInput, HandoverVersionUncheckedUpdateWithoutCreatorInput>
    create: XOR<HandoverVersionCreateWithoutCreatorInput, HandoverVersionUncheckedCreateWithoutCreatorInput>
  }

  export type HandoverVersionUpdateWithWhereUniqueWithoutCreatorInput = {
    where: HandoverVersionWhereUniqueInput
    data: XOR<HandoverVersionUpdateWithoutCreatorInput, HandoverVersionUncheckedUpdateWithoutCreatorInput>
  }

  export type HandoverVersionUpdateManyWithWhereWithoutCreatorInput = {
    where: HandoverVersionScalarWhereInput
    data: XOR<HandoverVersionUpdateManyMutationInput, HandoverVersionUncheckedUpdateManyWithoutCreatorInput>
  }

  export type HandoverVersionScalarWhereInput = {
    AND?: HandoverVersionScalarWhereInput | HandoverVersionScalarWhereInput[]
    OR?: HandoverVersionScalarWhereInput[]
    NOT?: HandoverVersionScalarWhereInput | HandoverVersionScalarWhereInput[]
    id?: IntFilter<"HandoverVersion"> | number
    documentId?: IntFilter<"HandoverVersion"> | number
    versionNumber?: IntFilter<"HandoverVersion"> | number
    mongoId?: StringFilter<"HandoverVersion"> | string
    createdAt?: DateTimeFilter<"HandoverVersion"> | Date | string
    createdBy?: IntFilter<"HandoverVersion"> | number
    changeSummary?: StringNullableFilter<"HandoverVersion"> | string | null
  }

  export type HandoverShareUpsertWithWhereUniqueWithoutSharerInput = {
    where: HandoverShareWhereUniqueInput
    update: XOR<HandoverShareUpdateWithoutSharerInput, HandoverShareUncheckedUpdateWithoutSharerInput>
    create: XOR<HandoverShareCreateWithoutSharerInput, HandoverShareUncheckedCreateWithoutSharerInput>
  }

  export type HandoverShareUpdateWithWhereUniqueWithoutSharerInput = {
    where: HandoverShareWhereUniqueInput
    data: XOR<HandoverShareUpdateWithoutSharerInput, HandoverShareUncheckedUpdateWithoutSharerInput>
  }

  export type HandoverShareUpdateManyWithWhereWithoutSharerInput = {
    where: HandoverShareScalarWhereInput
    data: XOR<HandoverShareUpdateManyMutationInput, HandoverShareUncheckedUpdateManyWithoutSharerInput>
  }

  export type HandoverShareScalarWhereInput = {
    AND?: HandoverShareScalarWhereInput | HandoverShareScalarWhereInput[]
    OR?: HandoverShareScalarWhereInput[]
    NOT?: HandoverShareScalarWhereInput | HandoverShareScalarWhereInput[]
    id?: IntFilter<"HandoverShare"> | number
    documentId?: IntFilter<"HandoverShare"> | number
    sharedWithUserId?: IntFilter<"HandoverShare"> | number
    permissionLevel?: StringFilter<"HandoverShare"> | string
    sharedAt?: DateTimeFilter<"HandoverShare"> | Date | string
    sharedBy?: IntFilter<"HandoverShare"> | number
    expiresAt?: DateTimeNullableFilter<"HandoverShare"> | Date | string | null
  }

  export type HandoverShareUpsertWithWhereUniqueWithoutSharedWithUserInput = {
    where: HandoverShareWhereUniqueInput
    update: XOR<HandoverShareUpdateWithoutSharedWithUserInput, HandoverShareUncheckedUpdateWithoutSharedWithUserInput>
    create: XOR<HandoverShareCreateWithoutSharedWithUserInput, HandoverShareUncheckedCreateWithoutSharedWithUserInput>
  }

  export type HandoverShareUpdateWithWhereUniqueWithoutSharedWithUserInput = {
    where: HandoverShareWhereUniqueInput
    data: XOR<HandoverShareUpdateWithoutSharedWithUserInput, HandoverShareUncheckedUpdateWithoutSharedWithUserInput>
  }

  export type HandoverShareUpdateManyWithWhereWithoutSharedWithUserInput = {
    where: HandoverShareScalarWhereInput
    data: XOR<HandoverShareUpdateManyMutationInput, HandoverShareUncheckedUpdateManyWithoutSharedWithUserInput>
  }

  export type UserCreateWithoutHandoversInput = {
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    comments?: HandoverCommentCreateNestedManyWithoutAuthorInput
    versions?: HandoverVersionCreateNestedManyWithoutCreatorInput
    shares?: HandoverShareCreateNestedManyWithoutSharerInput
    sharesReceived?: HandoverShareCreateNestedManyWithoutSharedWithUserInput
  }

  export type UserUncheckedCreateWithoutHandoversInput = {
    id?: number
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    comments?: HandoverCommentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: HandoverVersionUncheckedCreateNestedManyWithoutCreatorInput
    shares?: HandoverShareUncheckedCreateNestedManyWithoutSharerInput
    sharesReceived?: HandoverShareUncheckedCreateNestedManyWithoutSharedWithUserInput
  }

  export type UserCreateOrConnectWithoutHandoversInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHandoversInput, UserUncheckedCreateWithoutHandoversInput>
  }

  export type HandoverVersionCreateWithoutDocumentInput = {
    versionNumber: number
    mongoId: string
    createdAt?: Date | string
    changeSummary?: string | null
    creator: UserCreateNestedOneWithoutVersionsInput
  }

  export type HandoverVersionUncheckedCreateWithoutDocumentInput = {
    id?: number
    versionNumber: number
    mongoId: string
    createdAt?: Date | string
    createdBy: number
    changeSummary?: string | null
  }

  export type HandoverVersionCreateOrConnectWithoutDocumentInput = {
    where: HandoverVersionWhereUniqueInput
    create: XOR<HandoverVersionCreateWithoutDocumentInput, HandoverVersionUncheckedCreateWithoutDocumentInput>
  }

  export type HandoverVersionCreateManyDocumentInputEnvelope = {
    data: HandoverVersionCreateManyDocumentInput | HandoverVersionCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type HandoverShareCreateWithoutDocumentInput = {
    permissionLevel?: string
    sharedAt?: Date | string
    expiresAt?: Date | string | null
    sharedWithUser: UserCreateNestedOneWithoutSharesReceivedInput
    sharer: UserCreateNestedOneWithoutSharesInput
  }

  export type HandoverShareUncheckedCreateWithoutDocumentInput = {
    id?: number
    sharedWithUserId: number
    permissionLevel?: string
    sharedAt?: Date | string
    sharedBy: number
    expiresAt?: Date | string | null
  }

  export type HandoverShareCreateOrConnectWithoutDocumentInput = {
    where: HandoverShareWhereUniqueInput
    create: XOR<HandoverShareCreateWithoutDocumentInput, HandoverShareUncheckedCreateWithoutDocumentInput>
  }

  export type HandoverShareCreateManyDocumentInputEnvelope = {
    data: HandoverShareCreateManyDocumentInput | HandoverShareCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type HandoverCommentCreateWithoutDocumentInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    author: UserCreateNestedOneWithoutCommentsInput
    parentComment?: HandoverCommentCreateNestedOneWithoutRepliesInput
    replies?: HandoverCommentCreateNestedManyWithoutParentCommentInput
  }

  export type HandoverCommentUncheckedCreateWithoutDocumentInput = {
    id?: number
    authorId: number
    content: string
    parentCommentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    replies?: HandoverCommentUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type HandoverCommentCreateOrConnectWithoutDocumentInput = {
    where: HandoverCommentWhereUniqueInput
    create: XOR<HandoverCommentCreateWithoutDocumentInput, HandoverCommentUncheckedCreateWithoutDocumentInput>
  }

  export type HandoverCommentCreateManyDocumentInputEnvelope = {
    data: HandoverCommentCreateManyDocumentInput | HandoverCommentCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutHandoversInput = {
    update: XOR<UserUpdateWithoutHandoversInput, UserUncheckedUpdateWithoutHandoversInput>
    create: XOR<UserCreateWithoutHandoversInput, UserUncheckedCreateWithoutHandoversInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHandoversInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHandoversInput, UserUncheckedUpdateWithoutHandoversInput>
  }

  export type UserUpdateWithoutHandoversInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    comments?: HandoverCommentUpdateManyWithoutAuthorNestedInput
    versions?: HandoverVersionUpdateManyWithoutCreatorNestedInput
    shares?: HandoverShareUpdateManyWithoutSharerNestedInput
    sharesReceived?: HandoverShareUpdateManyWithoutSharedWithUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHandoversInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    comments?: HandoverCommentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: HandoverVersionUncheckedUpdateManyWithoutCreatorNestedInput
    shares?: HandoverShareUncheckedUpdateManyWithoutSharerNestedInput
    sharesReceived?: HandoverShareUncheckedUpdateManyWithoutSharedWithUserNestedInput
  }

  export type HandoverVersionUpsertWithWhereUniqueWithoutDocumentInput = {
    where: HandoverVersionWhereUniqueInput
    update: XOR<HandoverVersionUpdateWithoutDocumentInput, HandoverVersionUncheckedUpdateWithoutDocumentInput>
    create: XOR<HandoverVersionCreateWithoutDocumentInput, HandoverVersionUncheckedCreateWithoutDocumentInput>
  }

  export type HandoverVersionUpdateWithWhereUniqueWithoutDocumentInput = {
    where: HandoverVersionWhereUniqueInput
    data: XOR<HandoverVersionUpdateWithoutDocumentInput, HandoverVersionUncheckedUpdateWithoutDocumentInput>
  }

  export type HandoverVersionUpdateManyWithWhereWithoutDocumentInput = {
    where: HandoverVersionScalarWhereInput
    data: XOR<HandoverVersionUpdateManyMutationInput, HandoverVersionUncheckedUpdateManyWithoutDocumentInput>
  }

  export type HandoverShareUpsertWithWhereUniqueWithoutDocumentInput = {
    where: HandoverShareWhereUniqueInput
    update: XOR<HandoverShareUpdateWithoutDocumentInput, HandoverShareUncheckedUpdateWithoutDocumentInput>
    create: XOR<HandoverShareCreateWithoutDocumentInput, HandoverShareUncheckedCreateWithoutDocumentInput>
  }

  export type HandoverShareUpdateWithWhereUniqueWithoutDocumentInput = {
    where: HandoverShareWhereUniqueInput
    data: XOR<HandoverShareUpdateWithoutDocumentInput, HandoverShareUncheckedUpdateWithoutDocumentInput>
  }

  export type HandoverShareUpdateManyWithWhereWithoutDocumentInput = {
    where: HandoverShareScalarWhereInput
    data: XOR<HandoverShareUpdateManyMutationInput, HandoverShareUncheckedUpdateManyWithoutDocumentInput>
  }

  export type HandoverCommentUpsertWithWhereUniqueWithoutDocumentInput = {
    where: HandoverCommentWhereUniqueInput
    update: XOR<HandoverCommentUpdateWithoutDocumentInput, HandoverCommentUncheckedUpdateWithoutDocumentInput>
    create: XOR<HandoverCommentCreateWithoutDocumentInput, HandoverCommentUncheckedCreateWithoutDocumentInput>
  }

  export type HandoverCommentUpdateWithWhereUniqueWithoutDocumentInput = {
    where: HandoverCommentWhereUniqueInput
    data: XOR<HandoverCommentUpdateWithoutDocumentInput, HandoverCommentUncheckedUpdateWithoutDocumentInput>
  }

  export type HandoverCommentUpdateManyWithWhereWithoutDocumentInput = {
    where: HandoverCommentScalarWhereInput
    data: XOR<HandoverCommentUpdateManyMutationInput, HandoverCommentUncheckedUpdateManyWithoutDocumentInput>
  }

  export type HandoverDocumentCreateWithoutVersionsInput = {
    title: string
    status?: string
    priority?: string
    category?: string | null
    tags?: HandoverDocumentCreatetagsInput | string[]
    mongoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    archivedAt?: Date | string | null
    author: UserCreateNestedOneWithoutHandoversInput
    shares?: HandoverShareCreateNestedManyWithoutDocumentInput
    comments?: HandoverCommentCreateNestedManyWithoutDocumentInput
  }

  export type HandoverDocumentUncheckedCreateWithoutVersionsInput = {
    id?: number
    title: string
    authorId: number
    status?: string
    priority?: string
    category?: string | null
    tags?: HandoverDocumentCreatetagsInput | string[]
    mongoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    archivedAt?: Date | string | null
    shares?: HandoverShareUncheckedCreateNestedManyWithoutDocumentInput
    comments?: HandoverCommentUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type HandoverDocumentCreateOrConnectWithoutVersionsInput = {
    where: HandoverDocumentWhereUniqueInput
    create: XOR<HandoverDocumentCreateWithoutVersionsInput, HandoverDocumentUncheckedCreateWithoutVersionsInput>
  }

  export type UserCreateWithoutVersionsInput = {
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    handovers?: HandoverDocumentCreateNestedManyWithoutAuthorInput
    comments?: HandoverCommentCreateNestedManyWithoutAuthorInput
    shares?: HandoverShareCreateNestedManyWithoutSharerInput
    sharesReceived?: HandoverShareCreateNestedManyWithoutSharedWithUserInput
  }

  export type UserUncheckedCreateWithoutVersionsInput = {
    id?: number
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    handovers?: HandoverDocumentUncheckedCreateNestedManyWithoutAuthorInput
    comments?: HandoverCommentUncheckedCreateNestedManyWithoutAuthorInput
    shares?: HandoverShareUncheckedCreateNestedManyWithoutSharerInput
    sharesReceived?: HandoverShareUncheckedCreateNestedManyWithoutSharedWithUserInput
  }

  export type UserCreateOrConnectWithoutVersionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVersionsInput, UserUncheckedCreateWithoutVersionsInput>
  }

  export type HandoverDocumentUpsertWithoutVersionsInput = {
    update: XOR<HandoverDocumentUpdateWithoutVersionsInput, HandoverDocumentUncheckedUpdateWithoutVersionsInput>
    create: XOR<HandoverDocumentCreateWithoutVersionsInput, HandoverDocumentUncheckedCreateWithoutVersionsInput>
    where?: HandoverDocumentWhereInput
  }

  export type HandoverDocumentUpdateToOneWithWhereWithoutVersionsInput = {
    where?: HandoverDocumentWhereInput
    data: XOR<HandoverDocumentUpdateWithoutVersionsInput, HandoverDocumentUncheckedUpdateWithoutVersionsInput>
  }

  export type HandoverDocumentUpdateWithoutVersionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    author?: UserUpdateOneRequiredWithoutHandoversNestedInput
    shares?: HandoverShareUpdateManyWithoutDocumentNestedInput
    comments?: HandoverCommentUpdateManyWithoutDocumentNestedInput
  }

  export type HandoverDocumentUncheckedUpdateWithoutVersionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shares?: HandoverShareUncheckedUpdateManyWithoutDocumentNestedInput
    comments?: HandoverCommentUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type UserUpsertWithoutVersionsInput = {
    update: XOR<UserUpdateWithoutVersionsInput, UserUncheckedUpdateWithoutVersionsInput>
    create: XOR<UserCreateWithoutVersionsInput, UserUncheckedCreateWithoutVersionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVersionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVersionsInput, UserUncheckedUpdateWithoutVersionsInput>
  }

  export type UserUpdateWithoutVersionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    handovers?: HandoverDocumentUpdateManyWithoutAuthorNestedInput
    comments?: HandoverCommentUpdateManyWithoutAuthorNestedInput
    shares?: HandoverShareUpdateManyWithoutSharerNestedInput
    sharesReceived?: HandoverShareUpdateManyWithoutSharedWithUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVersionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    handovers?: HandoverDocumentUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: HandoverCommentUncheckedUpdateManyWithoutAuthorNestedInput
    shares?: HandoverShareUncheckedUpdateManyWithoutSharerNestedInput
    sharesReceived?: HandoverShareUncheckedUpdateManyWithoutSharedWithUserNestedInput
  }

  export type HandoverDocumentCreateWithoutSharesInput = {
    title: string
    status?: string
    priority?: string
    category?: string | null
    tags?: HandoverDocumentCreatetagsInput | string[]
    mongoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    archivedAt?: Date | string | null
    author: UserCreateNestedOneWithoutHandoversInput
    versions?: HandoverVersionCreateNestedManyWithoutDocumentInput
    comments?: HandoverCommentCreateNestedManyWithoutDocumentInput
  }

  export type HandoverDocumentUncheckedCreateWithoutSharesInput = {
    id?: number
    title: string
    authorId: number
    status?: string
    priority?: string
    category?: string | null
    tags?: HandoverDocumentCreatetagsInput | string[]
    mongoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    archivedAt?: Date | string | null
    versions?: HandoverVersionUncheckedCreateNestedManyWithoutDocumentInput
    comments?: HandoverCommentUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type HandoverDocumentCreateOrConnectWithoutSharesInput = {
    where: HandoverDocumentWhereUniqueInput
    create: XOR<HandoverDocumentCreateWithoutSharesInput, HandoverDocumentUncheckedCreateWithoutSharesInput>
  }

  export type UserCreateWithoutSharesReceivedInput = {
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    handovers?: HandoverDocumentCreateNestedManyWithoutAuthorInput
    comments?: HandoverCommentCreateNestedManyWithoutAuthorInput
    versions?: HandoverVersionCreateNestedManyWithoutCreatorInput
    shares?: HandoverShareCreateNestedManyWithoutSharerInput
  }

  export type UserUncheckedCreateWithoutSharesReceivedInput = {
    id?: number
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    handovers?: HandoverDocumentUncheckedCreateNestedManyWithoutAuthorInput
    comments?: HandoverCommentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: HandoverVersionUncheckedCreateNestedManyWithoutCreatorInput
    shares?: HandoverShareUncheckedCreateNestedManyWithoutSharerInput
  }

  export type UserCreateOrConnectWithoutSharesReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSharesReceivedInput, UserUncheckedCreateWithoutSharesReceivedInput>
  }

  export type UserCreateWithoutSharesInput = {
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    handovers?: HandoverDocumentCreateNestedManyWithoutAuthorInput
    comments?: HandoverCommentCreateNestedManyWithoutAuthorInput
    versions?: HandoverVersionCreateNestedManyWithoutCreatorInput
    sharesReceived?: HandoverShareCreateNestedManyWithoutSharedWithUserInput
  }

  export type UserUncheckedCreateWithoutSharesInput = {
    id?: number
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    handovers?: HandoverDocumentUncheckedCreateNestedManyWithoutAuthorInput
    comments?: HandoverCommentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: HandoverVersionUncheckedCreateNestedManyWithoutCreatorInput
    sharesReceived?: HandoverShareUncheckedCreateNestedManyWithoutSharedWithUserInput
  }

  export type UserCreateOrConnectWithoutSharesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSharesInput, UserUncheckedCreateWithoutSharesInput>
  }

  export type HandoverDocumentUpsertWithoutSharesInput = {
    update: XOR<HandoverDocumentUpdateWithoutSharesInput, HandoverDocumentUncheckedUpdateWithoutSharesInput>
    create: XOR<HandoverDocumentCreateWithoutSharesInput, HandoverDocumentUncheckedCreateWithoutSharesInput>
    where?: HandoverDocumentWhereInput
  }

  export type HandoverDocumentUpdateToOneWithWhereWithoutSharesInput = {
    where?: HandoverDocumentWhereInput
    data: XOR<HandoverDocumentUpdateWithoutSharesInput, HandoverDocumentUncheckedUpdateWithoutSharesInput>
  }

  export type HandoverDocumentUpdateWithoutSharesInput = {
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    author?: UserUpdateOneRequiredWithoutHandoversNestedInput
    versions?: HandoverVersionUpdateManyWithoutDocumentNestedInput
    comments?: HandoverCommentUpdateManyWithoutDocumentNestedInput
  }

  export type HandoverDocumentUncheckedUpdateWithoutSharesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    versions?: HandoverVersionUncheckedUpdateManyWithoutDocumentNestedInput
    comments?: HandoverCommentUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type UserUpsertWithoutSharesReceivedInput = {
    update: XOR<UserUpdateWithoutSharesReceivedInput, UserUncheckedUpdateWithoutSharesReceivedInput>
    create: XOR<UserCreateWithoutSharesReceivedInput, UserUncheckedCreateWithoutSharesReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSharesReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSharesReceivedInput, UserUncheckedUpdateWithoutSharesReceivedInput>
  }

  export type UserUpdateWithoutSharesReceivedInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    handovers?: HandoverDocumentUpdateManyWithoutAuthorNestedInput
    comments?: HandoverCommentUpdateManyWithoutAuthorNestedInput
    versions?: HandoverVersionUpdateManyWithoutCreatorNestedInput
    shares?: HandoverShareUpdateManyWithoutSharerNestedInput
  }

  export type UserUncheckedUpdateWithoutSharesReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    handovers?: HandoverDocumentUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: HandoverCommentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: HandoverVersionUncheckedUpdateManyWithoutCreatorNestedInput
    shares?: HandoverShareUncheckedUpdateManyWithoutSharerNestedInput
  }

  export type UserUpsertWithoutSharesInput = {
    update: XOR<UserUpdateWithoutSharesInput, UserUncheckedUpdateWithoutSharesInput>
    create: XOR<UserCreateWithoutSharesInput, UserUncheckedCreateWithoutSharesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSharesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSharesInput, UserUncheckedUpdateWithoutSharesInput>
  }

  export type UserUpdateWithoutSharesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    handovers?: HandoverDocumentUpdateManyWithoutAuthorNestedInput
    comments?: HandoverCommentUpdateManyWithoutAuthorNestedInput
    versions?: HandoverVersionUpdateManyWithoutCreatorNestedInput
    sharesReceived?: HandoverShareUpdateManyWithoutSharedWithUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSharesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    handovers?: HandoverDocumentUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: HandoverCommentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: HandoverVersionUncheckedUpdateManyWithoutCreatorNestedInput
    sharesReceived?: HandoverShareUncheckedUpdateManyWithoutSharedWithUserNestedInput
  }

  export type HandoverDocumentCreateWithoutCommentsInput = {
    title: string
    status?: string
    priority?: string
    category?: string | null
    tags?: HandoverDocumentCreatetagsInput | string[]
    mongoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    archivedAt?: Date | string | null
    author: UserCreateNestedOneWithoutHandoversInput
    versions?: HandoverVersionCreateNestedManyWithoutDocumentInput
    shares?: HandoverShareCreateNestedManyWithoutDocumentInput
  }

  export type HandoverDocumentUncheckedCreateWithoutCommentsInput = {
    id?: number
    title: string
    authorId: number
    status?: string
    priority?: string
    category?: string | null
    tags?: HandoverDocumentCreatetagsInput | string[]
    mongoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    archivedAt?: Date | string | null
    versions?: HandoverVersionUncheckedCreateNestedManyWithoutDocumentInput
    shares?: HandoverShareUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type HandoverDocumentCreateOrConnectWithoutCommentsInput = {
    where: HandoverDocumentWhereUniqueInput
    create: XOR<HandoverDocumentCreateWithoutCommentsInput, HandoverDocumentUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    handovers?: HandoverDocumentCreateNestedManyWithoutAuthorInput
    versions?: HandoverVersionCreateNestedManyWithoutCreatorInput
    shares?: HandoverShareCreateNestedManyWithoutSharerInput
    sharesReceived?: HandoverShareCreateNestedManyWithoutSharedWithUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: number
    username: string
    email: string
    fullName: string
    department?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    handovers?: HandoverDocumentUncheckedCreateNestedManyWithoutAuthorInput
    versions?: HandoverVersionUncheckedCreateNestedManyWithoutCreatorInput
    shares?: HandoverShareUncheckedCreateNestedManyWithoutSharerInput
    sharesReceived?: HandoverShareUncheckedCreateNestedManyWithoutSharedWithUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type HandoverCommentCreateWithoutRepliesInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    document: HandoverDocumentCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
    parentComment?: HandoverCommentCreateNestedOneWithoutRepliesInput
  }

  export type HandoverCommentUncheckedCreateWithoutRepliesInput = {
    id?: number
    documentId: number
    authorId: number
    content: string
    parentCommentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type HandoverCommentCreateOrConnectWithoutRepliesInput = {
    where: HandoverCommentWhereUniqueInput
    create: XOR<HandoverCommentCreateWithoutRepliesInput, HandoverCommentUncheckedCreateWithoutRepliesInput>
  }

  export type HandoverCommentCreateWithoutParentCommentInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    document: HandoverDocumentCreateNestedOneWithoutCommentsInput
    author: UserCreateNestedOneWithoutCommentsInput
    replies?: HandoverCommentCreateNestedManyWithoutParentCommentInput
  }

  export type HandoverCommentUncheckedCreateWithoutParentCommentInput = {
    id?: number
    documentId: number
    authorId: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    replies?: HandoverCommentUncheckedCreateNestedManyWithoutParentCommentInput
  }

  export type HandoverCommentCreateOrConnectWithoutParentCommentInput = {
    where: HandoverCommentWhereUniqueInput
    create: XOR<HandoverCommentCreateWithoutParentCommentInput, HandoverCommentUncheckedCreateWithoutParentCommentInput>
  }

  export type HandoverCommentCreateManyParentCommentInputEnvelope = {
    data: HandoverCommentCreateManyParentCommentInput | HandoverCommentCreateManyParentCommentInput[]
    skipDuplicates?: boolean
  }

  export type HandoverDocumentUpsertWithoutCommentsInput = {
    update: XOR<HandoverDocumentUpdateWithoutCommentsInput, HandoverDocumentUncheckedUpdateWithoutCommentsInput>
    create: XOR<HandoverDocumentCreateWithoutCommentsInput, HandoverDocumentUncheckedCreateWithoutCommentsInput>
    where?: HandoverDocumentWhereInput
  }

  export type HandoverDocumentUpdateToOneWithWhereWithoutCommentsInput = {
    where?: HandoverDocumentWhereInput
    data: XOR<HandoverDocumentUpdateWithoutCommentsInput, HandoverDocumentUncheckedUpdateWithoutCommentsInput>
  }

  export type HandoverDocumentUpdateWithoutCommentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    author?: UserUpdateOneRequiredWithoutHandoversNestedInput
    versions?: HandoverVersionUpdateManyWithoutDocumentNestedInput
    shares?: HandoverShareUpdateManyWithoutDocumentNestedInput
  }

  export type HandoverDocumentUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    versions?: HandoverVersionUncheckedUpdateManyWithoutDocumentNestedInput
    shares?: HandoverShareUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    handovers?: HandoverDocumentUpdateManyWithoutAuthorNestedInput
    versions?: HandoverVersionUpdateManyWithoutCreatorNestedInput
    shares?: HandoverShareUpdateManyWithoutSharerNestedInput
    sharesReceived?: HandoverShareUpdateManyWithoutSharedWithUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    handovers?: HandoverDocumentUncheckedUpdateManyWithoutAuthorNestedInput
    versions?: HandoverVersionUncheckedUpdateManyWithoutCreatorNestedInput
    shares?: HandoverShareUncheckedUpdateManyWithoutSharerNestedInput
    sharesReceived?: HandoverShareUncheckedUpdateManyWithoutSharedWithUserNestedInput
  }

  export type HandoverCommentUpsertWithoutRepliesInput = {
    update: XOR<HandoverCommentUpdateWithoutRepliesInput, HandoverCommentUncheckedUpdateWithoutRepliesInput>
    create: XOR<HandoverCommentCreateWithoutRepliesInput, HandoverCommentUncheckedCreateWithoutRepliesInput>
    where?: HandoverCommentWhereInput
  }

  export type HandoverCommentUpdateToOneWithWhereWithoutRepliesInput = {
    where?: HandoverCommentWhereInput
    data: XOR<HandoverCommentUpdateWithoutRepliesInput, HandoverCommentUncheckedUpdateWithoutRepliesInput>
  }

  export type HandoverCommentUpdateWithoutRepliesInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    document?: HandoverDocumentUpdateOneRequiredWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    parentComment?: HandoverCommentUpdateOneWithoutRepliesNestedInput
  }

  export type HandoverCommentUncheckedUpdateWithoutRepliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HandoverCommentUpsertWithWhereUniqueWithoutParentCommentInput = {
    where: HandoverCommentWhereUniqueInput
    update: XOR<HandoverCommentUpdateWithoutParentCommentInput, HandoverCommentUncheckedUpdateWithoutParentCommentInput>
    create: XOR<HandoverCommentCreateWithoutParentCommentInput, HandoverCommentUncheckedCreateWithoutParentCommentInput>
  }

  export type HandoverCommentUpdateWithWhereUniqueWithoutParentCommentInput = {
    where: HandoverCommentWhereUniqueInput
    data: XOR<HandoverCommentUpdateWithoutParentCommentInput, HandoverCommentUncheckedUpdateWithoutParentCommentInput>
  }

  export type HandoverCommentUpdateManyWithWhereWithoutParentCommentInput = {
    where: HandoverCommentScalarWhereInput
    data: XOR<HandoverCommentUpdateManyMutationInput, HandoverCommentUncheckedUpdateManyWithoutParentCommentInput>
  }

  export type HandoverDocumentCreateManyAuthorInput = {
    id?: number
    title: string
    status?: string
    priority?: string
    category?: string | null
    tags?: HandoverDocumentCreatetagsInput | string[]
    mongoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    archivedAt?: Date | string | null
  }

  export type HandoverCommentCreateManyAuthorInput = {
    id?: number
    documentId: number
    content: string
    parentCommentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type HandoverVersionCreateManyCreatorInput = {
    id?: number
    documentId: number
    versionNumber: number
    mongoId: string
    createdAt?: Date | string
    changeSummary?: string | null
  }

  export type HandoverShareCreateManySharerInput = {
    id?: number
    documentId: number
    sharedWithUserId: number
    permissionLevel?: string
    sharedAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type HandoverShareCreateManySharedWithUserInput = {
    id?: number
    documentId: number
    permissionLevel?: string
    sharedAt?: Date | string
    sharedBy: number
    expiresAt?: Date | string | null
  }

  export type HandoverDocumentUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    versions?: HandoverVersionUpdateManyWithoutDocumentNestedInput
    shares?: HandoverShareUpdateManyWithoutDocumentNestedInput
    comments?: HandoverCommentUpdateManyWithoutDocumentNestedInput
  }

  export type HandoverDocumentUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    versions?: HandoverVersionUncheckedUpdateManyWithoutDocumentNestedInput
    shares?: HandoverShareUncheckedUpdateManyWithoutDocumentNestedInput
    comments?: HandoverCommentUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type HandoverDocumentUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: HandoverDocumentUpdatetagsInput | string[]
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HandoverCommentUpdateWithoutAuthorInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    document?: HandoverDocumentUpdateOneRequiredWithoutCommentsNestedInput
    parentComment?: HandoverCommentUpdateOneWithoutRepliesNestedInput
    replies?: HandoverCommentUpdateManyWithoutParentCommentNestedInput
  }

  export type HandoverCommentUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    replies?: HandoverCommentUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type HandoverCommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HandoverVersionUpdateWithoutCreatorInput = {
    versionNumber?: IntFieldUpdateOperationsInput | number
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changeSummary?: NullableStringFieldUpdateOperationsInput | string | null
    document?: HandoverDocumentUpdateOneRequiredWithoutVersionsNestedInput
  }

  export type HandoverVersionUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    versionNumber?: IntFieldUpdateOperationsInput | number
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changeSummary?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HandoverVersionUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    versionNumber?: IntFieldUpdateOperationsInput | number
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changeSummary?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HandoverShareUpdateWithoutSharerInput = {
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    document?: HandoverDocumentUpdateOneRequiredWithoutSharesNestedInput
    sharedWithUser?: UserUpdateOneRequiredWithoutSharesReceivedNestedInput
  }

  export type HandoverShareUncheckedUpdateWithoutSharerInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    sharedWithUserId?: IntFieldUpdateOperationsInput | number
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HandoverShareUncheckedUpdateManyWithoutSharerInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    sharedWithUserId?: IntFieldUpdateOperationsInput | number
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HandoverShareUpdateWithoutSharedWithUserInput = {
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    document?: HandoverDocumentUpdateOneRequiredWithoutSharesNestedInput
    sharer?: UserUpdateOneRequiredWithoutSharesNestedInput
  }

  export type HandoverShareUncheckedUpdateWithoutSharedWithUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sharedBy?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HandoverShareUncheckedUpdateManyWithoutSharedWithUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sharedBy?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HandoverVersionCreateManyDocumentInput = {
    id?: number
    versionNumber: number
    mongoId: string
    createdAt?: Date | string
    createdBy: number
    changeSummary?: string | null
  }

  export type HandoverShareCreateManyDocumentInput = {
    id?: number
    sharedWithUserId: number
    permissionLevel?: string
    sharedAt?: Date | string
    sharedBy: number
    expiresAt?: Date | string | null
  }

  export type HandoverCommentCreateManyDocumentInput = {
    id?: number
    authorId: number
    content: string
    parentCommentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type HandoverVersionUpdateWithoutDocumentInput = {
    versionNumber?: IntFieldUpdateOperationsInput | number
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changeSummary?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutVersionsNestedInput
  }

  export type HandoverVersionUncheckedUpdateWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionNumber?: IntFieldUpdateOperationsInput | number
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    changeSummary?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HandoverVersionUncheckedUpdateManyWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionNumber?: IntFieldUpdateOperationsInput | number
    mongoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    changeSummary?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HandoverShareUpdateWithoutDocumentInput = {
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithUser?: UserUpdateOneRequiredWithoutSharesReceivedNestedInput
    sharer?: UserUpdateOneRequiredWithoutSharesNestedInput
  }

  export type HandoverShareUncheckedUpdateWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    sharedWithUserId?: IntFieldUpdateOperationsInput | number
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sharedBy?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HandoverShareUncheckedUpdateManyWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    sharedWithUserId?: IntFieldUpdateOperationsInput | number
    permissionLevel?: StringFieldUpdateOperationsInput | string
    sharedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sharedBy?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HandoverCommentUpdateWithoutDocumentInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    parentComment?: HandoverCommentUpdateOneWithoutRepliesNestedInput
    replies?: HandoverCommentUpdateManyWithoutParentCommentNestedInput
  }

  export type HandoverCommentUncheckedUpdateWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    replies?: HandoverCommentUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type HandoverCommentUncheckedUpdateManyWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    parentCommentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HandoverCommentCreateManyParentCommentInput = {
    id?: number
    documentId: number
    authorId: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type HandoverCommentUpdateWithoutParentCommentInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    document?: HandoverDocumentUpdateOneRequiredWithoutCommentsNestedInput
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    replies?: HandoverCommentUpdateManyWithoutParentCommentNestedInput
  }

  export type HandoverCommentUncheckedUpdateWithoutParentCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    replies?: HandoverCommentUncheckedUpdateManyWithoutParentCommentNestedInput
  }

  export type HandoverCommentUncheckedUpdateManyWithoutParentCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HandoverDocumentCountOutputTypeDefaultArgs instead
     */
    export type HandoverDocumentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HandoverDocumentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HandoverCommentCountOutputTypeDefaultArgs instead
     */
    export type HandoverCommentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HandoverCommentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HandoverDocumentDefaultArgs instead
     */
    export type HandoverDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HandoverDocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HandoverVersionDefaultArgs instead
     */
    export type HandoverVersionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HandoverVersionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HandoverShareDefaultArgs instead
     */
    export type HandoverShareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HandoverShareDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HandoverCommentDefaultArgs instead
     */
    export type HandoverCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HandoverCommentDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}